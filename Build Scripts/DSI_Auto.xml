<project name="AutomationTesting" basedir="." default="RunAutomation"
	xmlns:props="antlib:org.apache.ant.props">

	<propertyhelper>
		<props:nested />
	</propertyhelper>

	<taskdef resource="net/sf/antcontrib/antcontrib.properties" />
	<taskdef resource="net/sf/antcontrib/antlib.xml" />

	<property file="./DSI_Auto.Properties"/>
	<property file="C:\DSI_workspace\testComplete\Version.Properties"/>
	<property environment="JenkinsEnv" />
	<property environment="env" />

	<property name="TestVM.AntScripts.dir"
		value="${Git.dir}\Jenkins Build Scripts" />
	<property name="TestVM.TCScripts.dir"
		value="${Git.dir}\TCScripts\DSI_Auto" />
	<property name="TestVM.AntUtilities.dir"
		value="${Git.dir}\AntUtilities" />

	<!-- ===================Main Target================== -->
	<target name="RunAutomation">
	
		<sequential>
			<antcallback target="InitJenkinsServerJobWorkSpace" return="TimeLogging"/>
			<antcall target="CopySuiteInstallerToTestVM"/>
			<antcall target="PrepareEnv"/>
			<antcall target="SelectGroupforUserDefinedAxis"/>
			<antcall target="LaunchSuiteInstallerInVM"/>
			<touch file="C:/Runfinished.txt"/>
		</sequential>
		
		<if>
			<equals arg1="${VBRunResultCode}" arg2="400"/>
			<then>
				<antcall target="GetLicenseStatus"/>
			</then>
		</if>
		<!--<antcall target="ProcessTestCasesResults" />-->
	</target>
	
	<!-- ================================================ -->
	<target name="HeartBeat">
		<condition property="fileExists" > 
			<and>
			<available file="C:/Runfinished.txt" type="file"/>
			</and>
		</condition>
		<if>
			<not>
			<equals arg1="${fileExists}" arg2="true"/>
			</not>
			<then>
				<echo message="Heart beat signal..."/>
				<sleep seconds="30"/>
			</then>
		</if>
	</target>

	<!-- ================================================ -->
	<target name="InitJenkinsServerJobWorkSpace">
		<tstamp>
			<format property="TimeLogging" pattern="MM-dd-yyyy_HH-mm-ss"
				locale="en" />
		</tstamp>

		<tstamp>
			<format property="CopyrightYear" pattern="yyyy" locale="en" />
		</tstamp>

		<tstamp>
			<format property="BuildStartTime" pattern="MM/dd/yyyy HH:mm:ss"
				locale="en" />
		</tstamp>

	</target>

	<!-- ================================================ -->
	<target name="CopySuiteInstallerToTestVM">
		<echo message="FileServer.Build.Dir   	: ${FileServer.Build.Dir}${VersionNumber}"/>
		<echo message="FileServer.Build.Name  	: ${FileServer.Build.Name}"/>
		<echo message="FileServer.Build.Number  : ${VersionNumber}"/>
		<echo message="Product Build in Local 	: ${TestVM.SuiteInstaller.dir}"/>
		
		<condition property="file.exists" else="false">
			<available file="${FileServer.Build.Dir}${VersionNumber}\${FileServer.Build.Name}"/>
		</condition>
		<echo message="If file existed in FileServer?:${file.exists}"/>
		
		<copy file="${FileServer.Build.Dir}${VersionNumber}\${FileServer.Build.Name}" todir="${TestVM.SuiteInstaller.dir}"  overwrite="true" failonerror="false"/>
		
		<echo message="Checking the build copy process if successed"/>
		<if>
			<available file="${TestVM.SuiteInstaller.dir}\${FileServer.Build.Name}"/>
			<then>
				<property name="file.exists" value="true"/>
				<echo message="Copy Suite Installer to local successfull!"/>
			</then>
			<else>
				<fail message="Copy Suite Installer to local failure!"/>
			</else>
		</if>
	</target>
	
	<!-- ================================================ -->
	<target name="PrepareEnv">
	<!-- loop to install software according to parameters -->
		<for list="${Need_Components}" delimiter="," param="Component">
			<sequential>
				<antcall target="@{Component}"/>
			</sequential>
		</for>
	</target>
	
	<!-- ================================================ -->
	<target name="GetLicenseStatus">
		<property name="licenseStatusURL" value="http://10.1.145.11:1947/_int_/features.html"/>
		<property name="licenseSessionURL" value="http://10.1.145.11:1947/_int_/sessions.html?haspid=266647369897&amp;featureid=1031"/>
		<property name="SwarmServiceStatusURL" value="http://jenkins.skytapbuilddb.local:15795/"/>
		<script language="javascript" src="${TestVM.AntUtilities.dir}/LicenseStatus.js"/>
	</target>
	
	<!-- ================================================ -->
	<target name="SelectGroupforUserDefinedAxis">
	
		
		<!-- check whether need start second VM for upgrade remote test -->
		<echo
			message="-----------------Basic information------------------------------" />
		<echo>The mds file path : ${TestVM.TCScripts.dir}\${Automation.ProjectName}.mds</echo>
		<echo>ProjectName   	: ${Automation.ProjectName}</echo>
		<echo message="&quot;${TestVM.AntUtilities.dir}\SelectGroup.vbs&quot; &quot;${TestVM.TCScripts.dir}\${Automation.ProjectName}.mds&quot; &quot;${RunGroups}&quot;"/>
		
		<condition property="file.exists" else="false">
			<available file="${TestVM.TCScripts.dir}\${Automation.ProjectName}.mds"/>
		</condition>
		<echo message="Checking the project configuration if exists"/>
		<if>
			<available file="${TestVM.TCScripts.dir}\${Automation.ProjectName}.mds"/>
			<then>
				<echo message="the project configuration file exists"/>
			</then>
			<else>
				<fail message="the project configuration does not exists!"/>
			</else>
		</if>
		<exec executable="cmd" failonerror="true" timeout="18000000"
			outputproperty="VBRunOutput" errorproperty="VBErrorMsg"
			resultproperty="VBRunResultCode">
			<arg
				line="&quot;${TestVM.AntUtilities.dir}\SelectGroup.vbs&quot; &quot;${TestVM.TCScripts.dir}\${Automation.ProjectName}.mds&quot; &quot;${RunGroups}&quot;" />
		</exec>
		<echo message="===================VBRunOutput==========================" />
		<echo message="${VBRunOutput}" />
		<echo message="${VBErrorMsg}" />
		<echo message="VBRunResultCode: ${VBRunResultCode}" />
		<echo message="===================VBRunOutput==========================" />
	</target>
	
	<!-- ================================================ -->
	<target name="RunTestCasesOnVM">
		<echo
			message="-----------------Error code information--------------------------" />
		<echo message="wscript returns -1, means Unable to launch TestExecute because the license check has failed and TestExecute cannot obtain a license!" />
		<echo message="wscript returns 0, means test case run successful!" />
		<echo message="wscript returns 1, means test cases had a warning!" />
		<echo message="wscript returns 2, means test cases run failed!" />
		<echo message="wscript returns 4, means the test run wsa stopped by the Timeout specified with the /Timeout Command-line argument!" />
		<echo message="wscript returns 300, means launching test tool failed!" />
		<echo message="wscript returns 400, means getting test tool object failed, maybe no license is available!" />
		<echo message="wscript returns 500, means test tool name is unavailable, only 'TestExecute' and 'TestComplete' are allowed." />
		<echo
			message="wscript returns 1000, means test tool can not open the project, please check parameters." />
		<echo
			message="-----------------------------------------------------------------" />

		<!-- check whether need start second VM for upgrade remote test -->
		<echo
			message="-----------------Basic information------------------------------" />
		<echo>TCScripts.dir : ${TestVM.TCScripts.dir}</echo>
		<echo>TestExecutable: ${Automation.TestExecutable}</echo>
		<echo>ProjectSuit   : ${Automation.pjs}</echo>
		<echo
			message="------------------------------------------------------------------" />
		<echo message="Sit back and relax, TestCase is running" />

		<echo message="&quot;${TestVM.AntUtilities.dir}\RunGroup.vbs&quot; &quot;${Automation.TestExecutable}&quot; &quot;${TestVM.TCScripts.dir}\${Automation.pjs}&quot; &quot;${Automation.ProjectName}&quot; &quot;${${RunGroups}}&quot;" />
		<exec executable="cscript" failonerror="false" timeout="18000000"
			outputproperty="VBRunOutput" errorproperty="VBErrorMsg"
			resultproperty="VBRunResultCode">
			<arg
				line="&quot;TestVM.AntUtilities.dir\RunGroup.vbs&quot; &quot;${Automation.TestExecutable}&quot; &quot;${TestVM.TCScripts.dir}\${Automation.pjs}&quot; &quot;${Automation.ProjectName}&quot; &quot;${${RunGroups}}&quot;" />
		</exec>
		<echo message="===================VBRunOutput==========================" />
		<echo message="${VBRunOutput}" />
		<echo message="${VBErrorMsg}" />
		<echo message="VBRunResultCode: ${VBRunResultCode}" />
		<echo message="===================VBRunOutput==========================" />
		<!-- <if> <not> <equals arg1="${VBRunResultCode}" arg2="0" /> </not> <then> 
			<echo message="Calling TakeFailedSnapshotOnVM." /> <antcall target="TakeFailedSnapshotOnVM" 
			/> </then> </if> -->
	</target>
	
	<!-- ================================================ -->
	<target name="LaunchSuiteInstallerInVM">
		<echo message="FileServer.Build.Dir		: ${FileServer.Build.Dir}${VersionNumber}"/>
		<echo message="FileServer.Build.Name	: ${FileServer.Build.Name}"/>
		<echo message="ProductFamily			: ${ProductFamily}"/>
		<echo message="Product Build in Local	: ${TestVM.SuiteInstaller.dir}"/>
		
		<condition property="file.exists" else="false">
			<available file="${TestVM.SuiteInstaller.dir}${VersionNumber}\${FileServer.Build.Name}"/>
		</condition>
		<echo message="The Suite Installer in Local:${TestVM.SuiteInstaller.dir}\${FileServer.Build.Name}"/>
		<echo message="if file existed in Local?:${file.exists}"/>
		<property name="SuiteInstaller" location="${TestVM.SuiteInstaller.dir}\${FileServer.Build.Name}"/>
		<echo message="Start to Launch Suite Installer......" />
		<exec executable="${SuiteInstaller}" spawn="true"/>	
		<echo message="Suite Installer have started......" />
	</target>

	<!-- ================================================ -->
	<target name="ProcessTestCasesResults">
		<!-- Check results exist -->
		<trycatch property="errormessage">
			<try>
				<path id="TestComplete.RawLogInXml.Folder">
					<fileset dir="${TestVM.TCScripts.dir}/RawResultsInXml"
						includes="**/Log/**/{*}" />
				</path>

				<path id="TestComplete.ConvertedLogInHtml.Folder">
					<fileset dir="C:\AutomatedLog" includes="**/*" />
				</path>

				<property name="TestComplete.RawResultsInXml" refid="TestComplete.RawLogInXml.Folder" />

				<property name="TestComplete.ConvertedResultsInHtml" refid="TestComplete.ConvertedLogInHtml.Folder" />
			</try>
			<catch>
				<echo message="${errormessage}" />
			</catch>
		</trycatch>

		<condition property="TestComplete.Results.existed" else="false">
			<and>
				<not>
					<equals arg1="" arg2="${TestComplete.RawResultsInXml}" />
				</not>
				<not>
					<equals arg1="" arg2="${TestComplete.ConvertedResultsInHtml}" />
				</not>
			</and>
		</condition>
		<echo
			message="TestComplete finished running. Results is generated:${TestComplete.Results.existed}" />

		<!-- Use Delphi program to convert TestComplete Raw Log from XML into JUnit 
			format. The JUnit format results is used by Jenkins to determine the job 
			status. -->
		<if>
			<equals arg1="${TestComplete.Results.existed}" arg2="true" />
			<then>
				<copy todir="${TestVM.TCScripts.dir}\ConvertedLog" flatten="true">
					<fileset dir="${TestVM.TCScripts.dir}/RawResultsInXml"
						includes="**/Log/**/{*}" />
				</copy>
				<exec executable="${TestVM.AntUtilities.dir}/TestCompleteResultsTransform.exe"
					failonerror="true" timeout="7200000">
					<arg value="resultDir=${TestVM.TCScripts.dir}\ConvertedLog" />
				</exec>
			</then>
		</if>
		<available file="${TestVM.TCScripts.dir}/ConvertedLog/Results.xml" property="JUnitReport.exists"/>
		<echo>JUnit report generated : ${JUnitReport.exists}</echo>
		<echo>Workspace : ${JenkinsEnv.WORKSPACE}</echo>
		<copy file="${TestVM.TCScripts.dir}/ConvertedLog/Results.xml" todir="${JenkinsEnv.WORKSPACE}"/>
		<copy todir="${JenkinsEnv.WORKSPACE}" flatten="true">
			<fileset dir="${env.APPDATA}\Quest Software"
				includes="**/Toad.log" />
		</copy>
		<copy todir="${JenkinsEnv.WORKSPACE}" flatten="true">
			<fileset dir="C:\"
				includes="TDPRuntimeStatus.txt" />
		</copy>
	</target>
	
	<!-- ===============Components Begin================= -->
	<target name="TestExecute">
		<copy todir="C:/Components/TestExecute">
			<fileset dir="${EnvComponents.dir}\TestExecute\${TestExecute.dir}"/>
		</copy>
		<copy file="${TestVM.AntUtilities.dir}/${TestExecute.config}" tofile="C:/Components/TestExecute/setup.iss"/>
		
		
		<exec executable="${TestVM.AntUtilities.dir}/InstallTestExecute.bat"
					failonerror="true" timeout="3600000" outputproperty="TEOutput" errorproperty="TEErrorMsg"
			resultproperty="TEResultCode">
		</exec>
		<echo message="===================TEOutput==========================" />
		<echo message="${TEOutput}" />
		<echo message="${TEErrorMsg}" />
		<echo message="TEResultCode: ${TEResultCode}" />
		<echo message="===================TEOutput==========================" />
		<exec executable="${TestVM.AntUtilities.dir}/HASPConfig.bat" 
					failonerror="true" timeout="3600000" outputproperty="TEConfigOutput" errorproperty="TEConfigErrorMsg"
			resultproperty="TEConfigResultCode">
		</exec>
		<echo message="===================TEConfigOutput==========================" />
		<echo message="${TEConfigOutput}" />
		<echo message="${TEConfigErrorMsg}" />
		<echo message="TEConfigResultCode: ${TEConfigResultCode}" />
		<echo message="===================TEConfigOutput==========================" />
	</target>
		
	<!-- ================Components End================== -->
	
	<!-- ================================================ -->
	<!-- Expired -->
	<target name="SetBuildDisPlayName">
		<java jar="${TestVM.AntUtilities.dir}/Jenkins-cli.jar" fork="true"
			failonerror="true" maxmemory="128m">
			<arg value="-s" />
			<arg line="${JenkinsEnv.JENKINS_URL}" />
			<arg value="set-build-display-name" />
			<arg value="${JenkinsEnv.JOB_NAME}" />
			<arg value="${JenkinsEnv.BUILD_NUMBER}" />
			<arg value="#${JenkinsEnv.BUILD_NUMBER} ${JenkinsServer.LatestBuild}" />
			<classpath>
				<pathelement location="${TestVM.AntUtilities.dir}/Jenkins-cli.jar" />
				<pathelement path="${java.class.path}" />
			</classpath>
		</java>
		<echo message="Set build display name is:${JenkinsServer.LatestBuild}" />
	</target>

	<!-- ================================================ -->
	<!-- Expired -->
	<target name="TakeFailedSnapshotOnVM">
		<echo message="Calling ExecuteEsxCommand." />
		<antcall target="ExecuteEsxCommand">
			<param name="argCommand" value="snapshotfailure" />
			<param name="AutomationExecuteVM" value="${label}" />
		</antcall>
	</target>

</project>

