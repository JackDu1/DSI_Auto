uses
  
  AJMS,
  CommonFunction,
  LogFile,
  DSI,
  SQLServer,
//  QIUpdate,
  TXTFile,
  XMLUnit;
  

const
    NextTest = '[NextTest]'; 
    APP = 'QI.exe';
    TimeOut = 30;
    gApplication = 'Quest Installer';
    gResultsFileName = 'InstallFlag.INI';
    SniperPath = 'C:\Test Automation\AJMS\snipersvc.ini';
    INIFilePath = 'C:\Test Automation\AJMS\testapp.ini';
    
    

    function GetTheFirstTestObjective: string; forward;
    function GetBuildVersion: string;forward;
    procedure CreateTestLogFolder(aSubFolder,aTestCaseName: string);forward;
    procedure GetToTestObjective(aTestObjectiveID,aTestCaseID: string);forward;
    procedure Drive(aTestCaseID,aWorkflowID: string);forward;
    
        
var
    aColor,Fobj,TimeObj: OleVariant;
    
var
    i,gUnExWinCount,ErrorTotal: integer;
    
var
    gExceptionOccured,StopWorkflow: boolean;
    
var
    CmdText: WildeString;
var
    StartTime,EndTimevar,BoolResult,StrDescription,StrMessage,StrCagory,EndTime: string; 
   
var
    StrLogFileName,StrDisplayObjective,StrTotalFolderName,StrNow,StrTestCaseName,TempTestCaseName,FirstTestCaseName: string;
    TestEnvPath,BuildPath,ProgrameFile,BuildNumber: string;
    DProject,DProjectID;
    ConnectionString,DDataServer,DDataBase,DUser,DPassword: string;
    ReleaseType,aPlatform,AdhocBuild,InstallType,BuildEXEPath: string;
    
    

procedure Main;

var
    ToTestID,aTestCaseID: OleVariant;
    aObjectiveArray,aCheckObejctive;
    FolderID: OleVariant;
var
    i,i_count: integer;
    
begin

    Pass:          = 0;
    Fail:          = 0;
    bSuccess:      = true;
    CmdText:       = '';
    DDataServer:   = '10.6.208.53';
    DDataBase:     = 'DSI';
    DUser:         = 'sa';
    DPassword:     = 'Quest6848';
    DProject:      = 'DSI_Oracle';
    DProjectID:    = GetProjectID;
    Log.LockEvents(0);
    Project.Variables.StepIndex: = 1;
    aqString.ListSeparator: = ';';
    
    try
     
        {Strat to Watch}
        TimeObj: = HISUtils.StopWatch;
        TimeObj.Start();
        StartTime: = Utilities.FormatDateTime('m/d/yyyy h:mm:ss AM/PM',Utilities.Now);
        {active sniper rooute}
          
        {Get test case name via test objective from database}
        for i_count: =0 to Project.TestItems.ItemCount -1 do
        begin
                      
            StrTestCaseName: = Project.TestItems.TestItem[i_count].TestItem[0].Name;
            if StrTestCaseName = '' then
            begin
                Log.Error('The test case name is invalid!');
                exit;
            end;              
        
            {count the unexcepted error} 
            gExceptionOccured: = false;
            if bSuccess then
            begin
                ADOCon: = ADO.CreateADOConnection;
                ADOCon.ConnectionString: = ConnectionString;
                ADOCon.LoginPrompt: = false;
                ADOCon.Open();
            
                {Run the ToTest Table}
                try
                    begin
                        CmdText: = 'Select Objective from TestObjective where TestObjective.ObjectiveID = ' + 
                                    '(Select ObjectiveID FROM ToTest where TestCaseID = ' +
                                    '(Select TestCaseID from TestCaseName where TestCaseName = ''' + StrTestCaseName + ''' And TestCaseName.ProjectID = ' + VarToStr(DProjectID) + ') And ToTest.ProjectID = ' + VarToStr(DProjectID) + ')' + 
                                    'And TestObjective.ProjectID = ' + VarToStr(DProjectID);
                        
                        StrDisplayObjective: = GetAccessCellContent(CmdText,'Objective');
                        
                        CmdText: = 'Select ObjectiveID from ToTest where TestCaseID = (Select TestCaseID from TestCaseName where TestCaseName = ''' + StrTestCaseName + ''' And TestCaseName.ProjectID = ' + VarToStr(DProjectID) + ')' + 
                        ' And ToTest.ProjectID= ' + VarToStr(DProjectID);
                        ToTestID: = GetAccessCellContent(CmdText,'ObjectiveID');
                        CmdText: = 'Select TestCaseID from TestCaseName where TestCaseName = ''' + StrTestCaseName + ''' And TestCaseName.ProjectID = ' + VarToStr(DProjectID);
                        aTestCaseID: = GetAccessCellContent(CmdText,'TestCaseID');
                                                
            
                        if (ToTestID = VarToStr(nil)) and (aTestCaseID = VarToStr(nil)) then
                        begin
                            Log.Error('The Test Case Name is invalid!');
                        end
                        else
                        begin
                            GetToTestObjective(ToTestID,aTestCaseID);
                        end;
                    end;              
                except
                    Log.Error('Exception Occured: ' + exceptionmessage);
                end;    
            end; 
        end;                         
    finally
    begin         
        TimeObj.Stop();
    end;             
    end;
    
     
end;

procedure Drive(aTestCaseID,aWorkflowID: string);

var
    DriveCon,DriveRecord,DriveCnn: OleVariant;
var
    StrDescription,StrComm,DataAry,StrDataTable,StrSQL,StrCommon,StrDataTableName,StrUnitName: string;
var
    TestDataID,i,j,k: integer;
    

begin

    {Connect to Drive table}
    
    try
    begin
        DriveCon: = ADO.CreateADOConnection;
        DriveCon.ConnectionString: = ConnectionString;
        DriveCon.LoginPrompt: = false;
        DriveCon.Open();
    end;
    except
        Log.Error('Connect to Access Database failed: ' + exceptionmessage);
        exit;
    end;
    
    {Strat to DataPro Procedure}
    StopWorkflow: = false;
    {Get Workflow Step Details}
    try
    begin
        CmdText: = 'Select WorkflowStep.CommandName, DataTable.DataTableName, TestCase.DataID, WorkflowStep.OrderID, TestCase.TestCaseID,WorkflowStep.WorkflowID' + 
                  ' from (((Command LEFT JOIN DataTable ON Command.DataTableID = DataTable.DataTableID And Command.ProjectID = ' + VarToStr(DProjectID) + ' And DataTable.ProjectID = ' + VarToStr(DProjectID) + ')' +
                    ' INNER JOIN WorkflowStep ON Command.CommandName = WorkflowStep.CommandName And Command.ProjectID = ' + VarToStr(DProjectID) + ' And WorkflowStep.ProjectID = ' + VarToStr(DProjectID)+ ')' +
                    ' LEFT JOIN TestCase ON WorkflowStep.StepID = TestCase.StepID And WorkflowStep.ProjectID = ' + VarToStr(DProjectID) + ' And TestCase.ProjectID = ' + VarToStr(DProjectID) + ')' + 
                    ' WHERE WorkflowStep.WorkflowID = ' + aWorkflowID + ' and (TestCase.TestCaseID = ' + aTestCaseID + ' Or TestCase.TestCaseID is null' + 
                    ' And WorkflowStep.ProjectID =' +  VarToStr(DProjectID) + ') ORDER BY WorkflowStep.OrderID';
        DriveRecord: =DriveCon.Execute_(CmdText);
    end;
    except
        Log.Error(exceptionmessage);
        exit;
    end;
    
    try
    begin
        DriveRecord.MoveFirst;
        repeat
        begin
            Log.Enabled: = true;
            if StopWorkflow then
            begin
                Log.Message('Stopped Current Test Case!');
                if Aliases.DSI.Exists then
                    Aliases.DSI.Terminate;
                Log_ExitStep;
                exit;
            end;
            
            StrCommon: = DriveRecord.Fields('CommandName').Value;
            StrDataTableName: = DriveRecord.Fields('DataTableName').Value;
            TestDataID: = DriveRecord.Fields('DataID').Value;
    
            StrComm: = VarToStr(StrCommon);
            CmdText: = 'select * from Command where CommandName = ''' + StrComm + '''';
			      StrUnitName: = GetAccessCellContent(CmdText,'Module');
            StrDescription: = GetAccessCellContent(CmdText,'Description');
            
            Log_EnterStep('Script: ' + StrComm);
            
            {Check the DataID}
            if TestDataID = nil then
				        Evaluate(StrUnitName + '.' + StrComm)
            else
            begin
                TestDataID: = VarToStr(DriveRecord.Fields('DataID').Value);
                for i: = 0  to BuiltIn.GetListCount(TestDataID,',') - 1 do
                begin
                    if BuiltIn.GetListItem(TestDataID,i,',') = '*' then
                    begin
                        {Verify Command Name}
                        StrDataTableName: = DriveRecord.Fields('DataTableName').Value;
                        if ValidateSpecialTable(StrDataTableName) then
                        begin
                            GetWholeColumnData(StrDataTableName);
                            DataAry: = CreateVariantArray(0,VarArrayHighBound(DataArrary) - 1);
                            for j: = 0 to VarArrayHighBound(DataArrary) - 1 do
                                DataAry[j]: = DataArrary[j];
                            for k: = 0 to VarArrayHighBound(DataAry) - 1 do
                                Evaluate(StrUnitName + '.' + StrComm + '(''' + VarToStr(DataAry[k]) + '''' + ')');
                        end
                        else
                        begin
                            Log.Error('Retrieve test data failed!');
                            Log_ExitStep;
                            break;
                        end;
                    end
                    else
                        Evaluate(StrUnitName + '.' + StrComm + '(''' + BuiltIn.GetListItem(TestDataID,i,',') + '''' + ')');
                end;
            end;
            
            Log.Enabled: = true;
            Log_ExitStep;
            DriveRecord.MoveNext;
            
        end;
    
        until (DriveRecord.Eof);

    end;    
    except
        Log.Error('Get The Exception Error When Run Command Script: ' + exceptionmessage);
        Log_ExitStep;
        exit;    
    end;
    
    DriveRecord.Close;
    DriveRecord: = nil;
    

end;

function GetTheFirstTestObjective: string;

var
    aIntID,ObjArrary,TestSuite: OleVariant;
var
    i: integer;
    
begin
     TestSuite: = GetINIFileContents(INIFilePath,NextTest,'Test');
     
     
     if TestSuite = '*' then
     begin
        GetWholeColumnData('ToTest','ObjectiveID');
        if VarArrayHighBound(DataArrary,1) <> 0 then
        begin
            ObjArrary: = DataArrary;;
            for i: = 0 to VarArrayHighBound(DataArrary,1) - 1 do
                ObjArrary[i]: = DataArrary[i];    
        end;
        if VarArrayHighBound(ObjArrary,1) <> 0 then
        begin
            aIntID:  = VarToInt(ObjArrary[0]);
            CmdText: = 'Select * From TestObjective Where ObjectiveID = ''' + VarToStr(aIntID) + '''';
            result:  = GetAccessCellContent(CmdText,'Objective');
        end
        else
        begin
            Log_StepMsg('There is no any data record retieved!');
            result: = '';
        end;
     end
     else
        result: = BuiltIn.GetListItem(TestSuite,0,';'); 
     
end;

function GetBuildVersion: string;

var
    FileObj,VerInfo: OleVariant;
var
    DriverPath: string;
    
begin
    FileObj: = Sys.OleObject['Scripting.FileSystemObject'];
    InstallType:= GetINIFileContents(INIFilePath,NextTest,'InstallType');
    ReleaseType:= GetINIFileContents(INIFilePath,NextTest,'ReleaseType');
    aPlatform:  = GetINIFileContents(INIFilePath,NextTest,'Platform');
    AdhocBuild: = GetINIFileContents(INIFilePath,NextTest,'AdhocBuild');
    BuildEXEPath: = GetINIFileContents(INIFilePath,NextTest,'BuildEXEPath');
    
    try
    begin    
        if (UpperCase(InstallType) = 'C') or (UpperCase(InstallType) = 'O') then
        begin
            StrBuildName: = aqFileSystem.GetFileName(AdhocBuild);
            DriverPath: = Copy(AdhocBuild,1,Length(AdhocBuild) - Length(StrBuildName) - 1);
            if MapNetpathtoDriver(DriverPath) then
                BuildNumber: = GetFileVersion('G:\' + StrBuildName)
            else
                BuildNumber: = aqFileSystem.GetFileInfo(AdhocBuild).VersionInfo.FileFullVersion;
            result: = GetNumberfromString(BuildNumber);    
        end
        else
        begin
            DriverPath: = AdhocBuild;
            StrBuildName: = aqFileSystem.GetFileName(BuildEXEPath);
            if MapNetpathtoDriver(DriverPath) then
                BuildNumber: = GetFileVersion('G:\' + StrBuildName)
            else
                BuildNumber: = VarToStr(aqFileSystem.GetFileInfo(BuildEXEPath).VersionInfo.FileFullVersion);
            result: = GetNumberfromString(BuildNumber);
        end;
    end;
    finally
        Sys.OleObject['WScript.Shell'].Run('cmd /c net use G: /delete /Y',1,false);
        Delay(5000);
        Sys.Refresh;
        if Sys.WaitProcess('Cmd', 0).Exists then
            Sys.Process('Cmd').Terminate;
    end;

end;

procedure CreateTestLogFolder(aSubFolder,aTestCaseName: string);

var
    StrVersion,StrlogLocation,StrBundleName: string;

begin

    if aSubFolder = '' then
        aSubFolder: = 'Temp';
    
    StrlogLocation: = GetINIFileContents(INIFilePath,NextTest,'LogLocation');
    gResultShare: = '\\zhuflsw01\WORKGROUP\RND\DB\Quest Installer\Automation Test Log';
    
    if (StrLoglocation <> '') and (StrLogLocation <> gResultShare) then
        gResultShare: = StrLogLocation;
    gResultShare: = gResultShare + '\';
    
    StrVersion: = GetBuildVersion;
    StrBundleName:=aqFileSystem.GetFileNameWithoutExtension(AdhocBuild);
    
    if StrBundleName = '' then
        StrBundleName: = 'TempBundleName';
    
    if aSubFolder = '' then
        StrTotalFolderName: = gResultShare + StrBundleName + '\'  + 'Temp' + '\' + + ReplaceCharacters(aTestCaseName) + '\' + Sys.HostName + '\' + Utilities.FormatDateTime('yyyy-mm-dd_hh-nn-ss',Utilities.Now)
    else
        StrTotalFolderName: = gResultShare + StrBundleName + '\' + aSubFolder + '\' + ReplaceCharacters(aTestCaseName) + '\' + Sys.HostName + '\' + Utilities.FormatDateTime('yyyy-mm-dd_hh-nn-ss',Utilities.Now);   
    
    if aqFileSystem.Exists(StrTotalFolderName) then
        Sys.OleObject['WScript.Shell'].Run('cmd /c rd /s /q ' + '"' + StrTotalFolderName + '"',0,true);
    
    //Create Folder
    Sys.OleObject['WScript.Shell'].Run('cmd /c mkdir ' + '"' + StrTotalFolderName + '"',0,True);
    //Darrenn Jiang 2012.12.29
    //Add the judge for the created Folder exists or not.
    if not aqFileSystem.Exists(StrTotalFolderName) then
       begin
           Log_StepError('Create '+StrTotalFolderName+' Faild!');
           StopWorkflow: = true;
       end;    
    gResultShare: = StrTotalFolderName + '\';
    

end;

procedure GetToTestObjective(aTestObjectiveID,aTestCaseID: OleVariant);

var
    StrConn,StrCnn,RecSet,SQLText,TestCaseID,StrDriver,CStrTestCaseName: string;
var
    WorkflowID: integer;
var
    Color: OleVariant;

begin
    try
    begin
        ErrorTotal: = 0;
        
        if aTestObjectiveID = VarToStr(nil) then
        begin
            Log.Message('The Testobjective ID is invalid!');
            exit;
        end;
    
        StrConn: = ADO.CreateADOConnection;
        StrConn.ConnectionString: = ConnectionString;
        StrConn.LoginPrompt: = false;
        StrConn.Open();
        
        if aTestCaseID <> VarToStr(nil) Then
        begin
            CmdText: = 'Select Distinct ToTest.TestCaseID, TestCaseName.TestCaseName, TestCaseName.WorkflowID, Workflow.DriverScript, Workflow.Component from ToTest, TestCaseName, WorkflowStep, Workflow WHERE TestCaseName.TestCaseID = ' + VarToStr(aTestCaseID) + ' And  ToTest.TestCaseID = ' + VarToStr(aTestCaseID) + ' And TestCaseName.WorkflowID = Workflow.WorkflowID And Workflow.WorkflowID = WorkflowStep.WorkflowID and ToTest.ObjectiveID = ' + VarToStr(aTestObjectiveID);
            RecSet:  = StrConn.Execute_(CmdText);
        end
        else
        begin
            CmdText: = 'Select Distinct ToTest.TestCaseID, TestCaseName.TestCaseName, TestCaseName.WorkflowID, Workflow.DriverScript, Workflow.Component from ToTest, TestCaseName, WorkflowStep, Workflow WHERE ToTest.TestCaseID = TestCaseName.TestCaseID AND TestCaseName.WorkflowID = Workflow.WorkflowID AND Workflow.WorkflowID = WorkflowStep.WorkflowID AND ToTest.ObjectiveID = ' + VarToStr(aTestObjectiveID);
            RecSet:  = ADOCon.Execute_(CmdText);
        end;
    end;
    except
        Log.Error('Exception Error Occcured  While Execute SQL Statement: ' + exceptionmessage);
        exit;  
    end;    
    
    if VarToBool(RecSet.Eof) then
        Log.Message('There is no any workflow data record retrieved from database table!')
    else
    begin
        RecSet.MoveFirst;
        while not VarToBool(RecSet.Eof) do
        begin
            Log.Enabled: = true;
            TestCaseID: = RecSet.Fields('TestCaseID').Value;
            WorkflowID: = RecSet.Fields('WorkflowID').Value;
            StrDriver: = RecSet.Fields('DriverScript').Value;
            CStrTestCaseName: = RecSet.Fields('TestCaseName').Value;
            StrCagory: = RecSet.Fields('Component').Value;
                
            {Start to Log Routine}
            gExceptionOccured: = false;
            CmdText: = 'Select * from Workflow where WorkflowID = ' + VarToStr(WorkflowID);
            StrDescription: = GetAccessCellContent(CmdText,'WorkflowName');
            
            Log_EnterStep('TestCase: ' + VarToStr(CStrTestCaseName));    
            Log_EnterStep('WorkflowID' + '(' + VarToStr(WorkflowID) + ')');
                
            {Run Drive Script}
            if VarToStr(StrDriver) = 'DriverScript1' then
                Evaluate('MainUtility.Drive(''' + VarToStr(TestCaseID) + ''',''' + VarToStr(WorkflowID) + ''')')
            else
                Evaluate('MainUtility.Drive(''' + VarToStr(TestCaseID) + ''',''' + VarToStr(WorkflowID) + ''')');
                
            Log_ExitStep;
            Log_ExitStep;
                
            RecSet.MoveNext;
            
            //Store Runned test case result to xml file
        end;
        
        RecSet.Close();
        StrConn.Close;
        
    end;
    
    RecSet: = nil;
    StrConn: = nil;


end;

procedure GeneralEvents_OnUnexpectedWindow(Sender; Window; LogParams);
var ExceptionWindows,OKButton;
begin
     if Aliases.QI.Exists then
        Aliases.QI.Close();
     ExceptionWindows:=Sys.FindChild('Caption','User Experience Feedback',10);
     OKButton:=ExceptionWindows.FindChild('Caption','OK',2);
     if OKButton.Exists then
        OKButton.Click;
     if Aliases.ToadDataModeler.TDM_MessageForm.Exists then
     begin
       Aliases.ToadDataModeler.TDM_MessageForm.Close;
     end;   
end;

