
uses
  AJMS,
  CommonFunction,
  LogFile,
  SQLServer,
  TXTFile,
  MainUtility,
  XMLUnit,
  FinishProducts;


const
    StrLicensepath = 'C:\Temp\';
    SoSSEInstance = '10.30.168.158';
    SoSSEUser = 'sa';
    SoSSEPassword = 'quest6848';
    SoSSEDatabaseName='SpotlightDesktopPlayback';

    
   
function Formatdsize(dsize: float): string;forward;    
function SelectFolderTreeViewItem(aStrTreeNodes: string,TreeView): boolean;forward;
function TreeViewItemSetChecked(oTree,sItem,bState): boolean;forward;
function VerifyTreeItemExists(oTree,sItem,BolExist): boolean;forward;
procedure DiagnosticServeraccount;forward;
procedure DropSpotlightDesktopPlaybackDatabase;forward;

  
var FMainForm,ProductImage,TFrLicensePage,PrdMemoText;
var LicenseText,AcceptBtn,Notacceptbtn,Nextbtn,Cancelbtn;
var SelectProductPage,NewProductsPanel;
var
    ApplicationDataPath,ProgramFiles,StrBuildName: string;


procedure DSI_LaunchSuiteInstaller;

var
    aStrPath,InsType,aStrBuildDir,BuildNumber,StrBuildName: string;
var
    j;

begin 
    
    StrBuildName: = 'Toad_for_Oracle_1_x86_Full.exe';
    if aqFileSystem.Exists('C:\SuiteInstaller\Oracle\' + StrBuildName) then
    begin
        try
            Sys.OleObject['WScript.Shell'].Run('"' + 'C:\SuiteInstaller\Oracle\' + StrBuildName + '"');
            BuildNumber: = aqFileSystem.GetFileInfo('C:\SuiteInstaller\Oracle\' + StrBuildName).VersionInfo.FileFullVersion;
            Log_StepMsg('Start to Launch Dell Software Installer: ' + StrBuildName);
        except
            Log_StepError('Launch Dell Software Installed Failure to: ' + exceptionmessage);
            exit;
            raise;
        end;
    end
    else
    begin
        Log_StepError('The Build File Does Not Existence under Folder: C:\SuiteInstaller\Oracle\' + StrBuildName);
        exit;
    end;    
    repeat
        if j<300 then
            Delay(1000)
        else
            break;
        j:=j+1;
        Aliases.DSI.RefreshMappingInfo;
    until (Aliases.DSI.Exists);    
    if Aliases.DSI.Exists then
    begin
        Log_StepMsg('The Dell Software Installer Launched!');
    end
    else
    begin
        Log_StepError('Launch Dell Software Installer Fialed!');
        exit;
    end;
            
end;
        
procedure DSI_LicensePage_VerifyTitle(aDataID: string);

var 
    StrTitle,StrPageTitle,StrPageSubtitle : string;
var
    aStrTitle: string;
    
begin
    
    //set the Main Form object
    FMainForm: = Aliases.DSI;
    TFrLicensePage: =Aliases.DSI.DSI_LicenseAgreement;
    try
    begin
    
        if not FMainForm.Exists then begin
            Log_StepError('The Dell Software Installer Window Does Not Exists!');
            StopWorkflow: = true;
            exit;
        end
        else
        begin
           // StrTitle: = FMainForm.Caption;
            StrPageTitle: = FMainForm.SubTitle.WndCaption;
            StrPageSubtitle: = Aliases.DSI.MainFormHeader.WndCaption;
            {Get The Title from access database}
            aStrTitle: = GetCellValue('QI_LicensePage_VerifyTitle',aDataID,'I_Title');

           { if( aqString.Compare(StrTitle,aStrTitle,False) = 0 ) then
                Log_StepMsg('The Product Name Display Correct In License Page,Displayed: ' + StrTitle + '; Expected: ' + aStrTitle)
            else
                Log_StepError('The Product Name Display Incorrect In License Page,Displayed: ' + StrTitle + '; Expected: ' + aStrTitle);}
            
            if (aqString.Compare(StrPageTitle,'Dell Software License Agreement',False) = 0 ) then
                Log_StepMsg('The Page Title Display Correct In License Page,Displayed: ' + StrPageTitle+ '; Expected: Dell Software License Agreement')
            else
                Log_StepError('The Page Title Display Correct In License Page,Displayed: ' + StrPageTitle+ '; Expected: Dell Software License Agreement');
            
            if (aqString.Compare(StrPageSubtitle,'Acknowledgment of The Dell Software License Agreement',False) = 0) then
                Log_StepMsg('The Page Caption Display Correct In License Page,Displayed: ' + StrPageTitle+ '; Expected: Acknowledgment of The Dell Software License Agreement')
            else
                Log_StepError('The Page Caption Display Correct In License Page,Displayed: ' + StrPageTitle+ '; Expected: Acknowledgment of The Dell Software License Agreement');
            
        end;
    end;
    except
        Log_StepError('Unexception Error: ' + exceptionmessage);
        StopWorkflow: = true;
    end;
          
end;    
    
procedure DSI_LicensePage_VerifyMemoText(aDataID: string);

var
    fileobj;
var
    StrMemoText,StrCurMemoText,StrPrdIcon,StrRegName,StrPrdTitle : WildeString;
var
    aStrMemoText,aStrPrdTitle: WildeString;
var 
    PrecalculatedHash : integer;
            
begin

    //set the Main Form object
    FMainForm: = Aliases.DSI;
    TFrLicensePage: = Aliases.DSI.DSI_LicenseAgreement;
    ProductImage: = Aliases.QI.QI_frm_Main.QI_TframeLicensing_LicensePage.QI_imgIcon_SQLNavigator;
    
    try
    begin
    
        aStrMemoText: = GetCellValue('QI_LicensePage_VerifyMemoText',aDataID,'I_FilePath');
        aStrMemoText: = aqString.Replace(aStrMemoText,'W:\Common\Automation\QI\5.0\QI\',project.ConfigPath,false);
        aStrPrdTitle: = GetCellValue('QI_LicensePage_VerifyMemoText',aDataID,'I_ProductTitle');
        
        if not FMainForm.Exists then
        begin
            Log_StepError('The Quest Installer Window Does Not Exists!');
            StopWorkflow: = true;
            exit;
        end
        else
            if TFrLicensePage.Exists then
            begin
                StrPrdTitle: = TFrLicensePage.QI_Lbl_Title.Caption;
                StrMemoText: = aqString.Trim(TFrLicensePage.QI_lbl_MemoText.Caption);
                StrCurMemoText: = aqFile.ReadWholeTextFile(aStrMemoText,aqFile.ctUnicode);
                
                StrCurMemoText: = aqString.Replace(StrCurMemoText,Chr(10),'');
                StrCurMemoText: = aqString.Replace(StrCurMemoText,Chr(13),'');
                StrCurMemoText: = aqString.Replace(StrCurMemoText,Chr(32),'');
                StrMemoText: = aqString.Replace(StrMemoText,Chr(10),'');
                StrMemoText: = aqString.Replace(StrMemoText,Chr(13),'');
                StrMemoText: = aqString.Replace(StrMemoText,Chr(32),'');
                if aqString.Compare(aqString.Trim(StrMemoText),aqString.Trim(StrCurMemoText),false) then
                    Log_StepMsg('The Product Memo Text Display Correct,Displayed: ' + chr(13) + StrMemoText + Chr(13) + 'Expected: ' + Chr(13) + StrCurMemoText)    
                else
                begin
                    Log_StepError('The Product Memo Text Display Incorrect,Displayed: ' + chr(13) + StrMemoText + Chr(13) + 'Expected: ' + Chr(13) + StrCurMemoText);
                end;   
                  
                ProductImage.RefreshMappingInfo;
                if ProductImage.Visible=true then
                begin
                    Log_StepMsg('The Product Image Visible On Page!');    
                end
                else
                begin
                    Log_StepError('The Product Icon not visible on Page!');
                end;
            
                if aqString.Trim(StrPrdTitle)=aqString.Trim(aStrPrdTitle) then
                    Log_StepMsg('The Product Title Display Correct!Displaed: ' + StrPrdTitle + '; Expected: ' + aStrPrdTitle)
                else
                    Log_StepError('The Product Title Display Incorrect!Displaed: ' + StrPrdTitle + '; Expected: ' + aStrPrdTitle);  
            end
            else
                Log_StepError('The License Page Does Not Exists!');
        end;
        except
            Log_StepError('Unexception Error: ' + exceptionmessage);
            StopWorkflow:= true;
            exit;
        end;
            
            
end;  

procedure DSI_LicensePage_VerifyLicense(aDataID: string);
var
    StrLicense,StrLicenseObject,aStrLicensePath,SQLText : string;
    fileobj : Olevariant; 
var 
    PrecalculatedHash : integer;


begin
    StrLicenseObject : = Aliases.DSI.DSI_LicenseAgreement.pnlLicense.Agreement;
    aStrLicensePath: = GetCellValue('QI_LicensePage_VerifyLicense',aDataID,'I_FilePath');
    
    try
    begin
    
        if not StrLicenseObject.Exists then
        begin
            Log_StepError('The License Panel Does Not Exists!');
            StopWorkflow: = true;
            exit;
        end
        else
            if StrLicenseObject.Visible then
            begin
                StrLicense : = StrLicenseObject.wText;
                try              
                  if not aqFileSystem.Exists(StrLicensePath) then
                      aqFileSystem.CreateFolder(StrLicensePath);      
                  AssignFile(fileobj,StrLicensePath + 'License.txt');
                  Rewrite(fileobj); 
                  Write(fileobj,StrLicense);
                  //another method to write contents to txt file                                        
                  //aqFile.WriteToTextFile(StrLicensePath + 'License.txt',StrLicense,21,true);
                finally
                  begin
                    CloseFile(fileobj);             
                  end;    
                end;
                   
                PrecalculatedHash := Files.CalculateHashValue(StrLicensePath + 'License.txt',aStrLicensePath);

                if Files.Compare(StrLicensePath + 'License.txt',aStrLicensePath,PrecalculatedHash) then
                    Log_StepMsg('The License Text Display Correct!')
                else
                begin
                    Log_StepError('The License Text Display Incorrect!');
                    Log_StepMsg(Files.LastError);
                end;
                 
                aqFile.Delete(StrLicensePath + 'License.txt');
                aqFileSystem.DeleteFolder(StrLicensePath); 
                              
            end
            else
                Log_StepError('The License Panel Does Not Exists!');
        end;
        except
            Log_StepError('Unexception Error: ' + exceptionmessage);
            StopWorkflow: = true;
        end; 
               
end;
        
procedure DSI_LicensePage_VerifyCopyRight();

var
    StrCopyright,CopyRightObj,RightDateObj,StrRightDate : string;
var
    aStrCopyRight,aStrRightDate,MyRegExp: string;
          
begin
   
   // aStrCopyRight: = GetCellValue('QI_LicensePage_VerifyCopyRight',aDataID,'I_CopyRight');
    aStrCopyRight:='©2015 Dell Inc.ALL RIGHTS RESERVED.';
    CopyRightObj : = Aliases.DSI.DSI_LicenseAgreement.DSI_LicensePage_Copyright;

    MyRegExp:=HISUtils.RegExpr;
    MyRegExp.Expression:='\n';
    
    if not (CopyrightObj.Exists) then
    begin
        Log_StepError('The Copy Right Label Does Not Exists!');
        StopWorkflow: = true;
        exit;
    end;
    
    StrCopyright : = CopyRightObj.WndCaption;
    StrCopyright:=MyRegExp.Replace(StrCopyright,'');
    
    if (AnsiUpperCase(StrCopyright) = AnsiUpperCase(aStrCopyRight)) then
        Log_StepMsg('The All Right Reserved Label Display Correct!Displayed: ' + StrCopyRight + '; Expected: '+aStrCopyRight)
    else
        Log_StepError('The All Rights Reserved Label Display Incorrect!Displayed: ' + StrCopyRight + '; Expected: '+aStrCopyRight);                  
end;     

{procedure QI_VerifyAbout(aDataID: string);
var
    StrVersion : string;
    AboutWindowObj,LegalObj,ColemLObj,SupportObj,ReleaseObj,SupportIEObj,ReleaseIEObj;
    SupportMesObj,LegalLibObj,SupportFodObj,AboutHypeLink;
var
    aStrVersion: string;
        
begin
    AboutHypeLink : = Aliases.QI.QI_frm_Main.QI_lbl_QIAbout;
    
    
    try
    begin
        aStrVersion: = GetCellValue('QI_VerifyAbout',aDataID,'I_AboutVersion');
    
        if not AboutHypeLink.Exists then 
        begin
            Log_StepError('The About Quest Installer Hypelink Does Not Exists!');
            StopWorkflow: = true;
            exit;
        end
        else 
        begin
            Aliases.QI.QI_frm_Main.Refresh;
            AboutHypeLink.RefreshMappingInfo;
            Runner.CallObjectMethodAsync(AboutHypeLink,'Click');   
            Sys.Refresh;
        end;
        Aliases.QI.WaitAliasChild('QI_TfrmAbout_AboutQuestWindow',150000);
        Aliases.QI.Refresh;      
        Aliases.QI.QI_TfrmAbout_AboutQuestWindow.RefreshMappingInfo;
        if Aliases.QI.QI_TfrmAbout_AboutQuestWindow.Exists then 
        begin
            AboutWindowObj: = Aliases.QI.QI_TfrmAbout_AboutQuestWindow;
            LegalObj: = Aliases.QI.QI_TfrmAbout_AboutQuestWindow.QI_lb_Legal;
            ColemLObj: = Aliases.QI.QI_TfrmAbout_AboutQuestWindow.QI_btn_SupportBundle;
            SupportObj: = Aliases.QI.QI_TfrmAbout_AboutQuestWindow.QI_lbl_WebSupport;
            ReleaseObj: = Aliases.QI.QI_TfrmAbout_AboutQuestWindow.QI_lab_ReleaseNotes;
            StrVersion: = Aliases.QI.QI_TfrmAbout_AboutQuestWindow.QI_About_lblVersion.Caption;
        
            //verify Version label
            StrVersion: = Copy(StrVersion,9,Length(StrVersion)-8);
            if StrVersion = aStrVersion then
                Log_StepMsg('The Dell Installer Version label Displayed Correct, Displayed: ' + StrVersion + '; Expected: ' + aStrVersion)
            else
            begin
                Log_StepError('The Dell Installer Version label Displayed Incorrect, Displayed: ' + StrVersion + '; Expected: ' + aStrVersion);
            end;
            
            if (AnsiLowerCase(AboutWindowObj.Caption)) = (AnsiLowerCase('About Dell Software Installer')) then
                Log_StepMsg('The Dell Software Installer Window Caption Display Correct! Displayed : ' + AboutWindowObj.Caption + '; Expected: About Dell Software Installer')
            else 
            begin
                Log_StepError('The Dell Software Installer Window Caption Display Incorrect! Displayed : ' + AboutWindowObj.Caption + '; Expected: About Dell Software Installer'); 
            end;
        
            //verify Release Notes Hypelink
            ReleaseObj.RefreshMappingInfo;    
            if not ReleaseObj.Exists then 
            begin
                Log_StepError('The Release Notes Lable Does Not Exists!');
            end
            else 
            begin
                ReleaseObj.RefreshMappingInfo;
                if ReleaseObj.Visible then 
                begin
                    ReleaseObj.Click();
                    Log_StepMsg('Click Release Notes Hypelink');
                    Sys.Refresh;
                    Delay(60000);
                    ReleaseIEObj: = Sys.Process('iexplore').FindChild('WndCaption','Dell Software Installer – Release Notes - Windows Internet Explorer');            
                    Sys.Refresh;
                    if ReleaseIEObj.Exists then 
                    begin
                        Log_StepMsg('The Release Notes Websites Opened and Web Title Display Correct!');
                    end
                    else 
                    begin
                        ReleaseIEObj: = Sys.Process('iexplore').FindChild('WndCaption','Dell Software Installer – Release Notes - Internet Explorer');            
                        Sys.Refresh;
                        if ReleaseIEObj.Exists then 
                        begin
                            Log_StepMsg('The Release Notes Websites Opened and Web Title Display Correct!');
                        end
                        else 
                            Log_StepError('The Release Notes Websites Opened but Web Title Display Incorrect!');
                    end;
                   // ReleaseIEObj.Close;
                    Sys.Process('iexplore').Terminate;                               
                end
                else
                    Log_StepError('The Release Notes Hypelink is not visible on window!');        
            end;
        
            //Verify Legal notes Label
            LegalObj.RefreshMappingInfo;        
            if LegalObj.Exists then 
            begin
                legalObj.Refresh;
                if LegalObj.Visible then 
                begin
                    LegalObj.Click();
                    Log_StepMsg('Click Legal Notices Hypelink');
                    Delay(60000);
                    LegalLibObj: = Sys.Process('QI').FindChild('WndCaption', 'Dell Software Installer - Third Party Contributions');
                    if LegalLibObj.Exists then 
                    begin
                        LegalLibObj.Activate;
                        LegalLibObj.Close();
                        Log_StepMsg('The Dell Software Installer Third party Licensing Document Opened!');
                    end
                    else
                        Log_StepError('The Dell Software Installer Third party Licensing Document Not Open!');
                    end
                else 
                begin
                    Log_StepError('The Logal Notices Hypelink is not visible on window!');
                end;
            end
            else 
            begin
                Log_StepError('The Logal Notices Hypelink does not exists!');
            end;
        
            //Verify Collect & Email Support Information button
            ColemlObj.RefreshMappingInfo;    
            if not ColemlObj.Exists then 
            begin
                Log_StepError('The Collect & Email Support Information Button does not exist on window!');
            end
            else
                begin
                    ColemlObj.RefreshMappingInfo;
                    if ColemlObj.Visible then begin
                        Log_StepMsg('The Collect & Email Support Information Button is visible On window!');
                    end
                    else
                        Log_StepError('The Collect & Email Support Information Button is not visible On window!');           
                end;
            
            //Verify Support Link     
            supportObj.RefreshMappingInfo;
            if supportObj.Exists then begin
                SupportObj.RefreshMappingInfo;
                if supportObj.Visible then begin
                    Log_StepMsg('The Support Link Hypelink is visible on window!');
                    Runner.CallObjectMethodAsync(SupportObj,'Click');
                    Log_StepMsg('Click Support Link');
                    Delay(180000);
                    //supportIEObj: = Sys.Process('iexplore').FindChild('WndCaption','Quest Support - Home | Quest Software is Now Part of Dell - Microsoft Internet Explorer');
                   supportIEObj: =Aliases.iexplore.wndIEFrame;
                    Sys.Refresh;
                    if supportIEObj.Exists then 
                    begin
                      if supportIEObj.Caption='Support - Windows Internet Explorer' then
                        begin
                          Log.Message('The Support Websites Opened!');
                          supportIEObj.Close;
                          Sys.Process('iexplore').Terminate;
                        end;  
                    end
                    else
                    begin
                            Log_StepError('The Support Websites not open after click Support Link button!');
                    end;
                end    
                else
                    Log_StepError('The Support Link not visible on window!');        
            end
            else
                Log_StepError('The Support Link Does Not Exists!');
                                             
            AboutWindowObj.Close();
            Log_StepMsg('Close the About Quest Installer window!');
            end
        else
            Log_StepError('The Quest Installer Window Does Not Exists');
    end;
    except
        Log_StepError('Unexception Error: ' + exceptionmessage);
        StopWorkflow: = true;
    end; 
              
end;}
       
procedure DSI_LicensePage_UserSelection(aDataID: string);

var
    aButtonName: string;

begin

    aButtonName: = GetCellValue('DSI_LicensePage_UserSelection',aDataID,'I_UserSelection');
    

    Aliases.DSI.DSI_LicenseAgreement.RefreshMappingInfo;
    AcceptBtn: = Aliases.DSI.DSI_LicenseAgreement.DSI_LicensePage_Accept;
    Notacceptbtn: =Aliases.DSI.DSI_LicenseAgreement.DSI_LicensePage_NoAccept;
    
    
    //Aliases.DSI.DSI_LicenseAgreement.Refresh;
    Aliases.DSI.DSI_LicenseAgreement.RefreshMappingInfo;
    Aliases.DSI.DSI_LicenseAgreement.DSI_LicensePage_Accept.Refresh;
    Aliases.DSI.DSI_LicenseAgreement.DSI_LicensePage_Accept.RefreshMappingInfo;
    
    if not Aliases.DSI.DSI_LicenseAgreement.DSI_LicensePage_Accept.Exists then
    begin
        Log_StepError('The Accept Radio button Does Not Exists!');
        exit;
    end;
    
    if UpperCase(aButtonName) = UpperCase('I Accept these terms') then
    begin
        Aliases.DSI.Activate;
        Delay(3000);
        Aliases.DSI.DSI_LicenseAgreement.DSI_LicensePage_Accept.Click;
        Aliases.DSI.DSI_LicenseAgreement.DSI_LicensePage_Accept.RefreshMappingInfo;
        if not Aliases.DSI.DSI_LicenseAgreement.DSI_LicensePage_Accept.Checked then
        begin
          Aliases.DSI.DSI_LicenseAgreement.DSI_LicensePage_Accept.Click;
        end;          
        Log_StepMsg('Click Accept Button!');
    end
    else
    begin
        Notacceptbtn.Click;
        Aliases.DSI.DSI_LicenseAgreement.DSI_LicensePage_NoAccept.Refresh;
        Log_StepMsg('Click I do not accept these terms Radio button!');
    end;    
end;

procedure DSI_ClickNextButton;

begin
    Delay(10000);
    Aliases.DSI.RefreshMappingInfo;
    if Aliases.DSI.DSI_Button_Next.Exists then 
    begin
        Log_StepMsg('The Next button Exist');
        Aliases.DSI.DSI_Button_Next.RefreshMappingInfo;
        if Aliases.DSI.DSI_Button_Next.Visible then 
        begin
            Aliases.DSI.DSI_Button_Next.RefreshMappingInfo;
            if Aliases.DSI.DSI_Button_Next.Enabled then
            begin
                Aliases.DSI.DSI_Button_Next.Click;
                Log_StepMsg('Click Next Button');    
            end
            else
            begin
                Log_StepError('The [Next] button is disabled');
               // StopWorkflow: = true;
                exit;
            end;
        end
        else
            Log_StepError('The Next button is not visible!');
    end
    else
    begin
        Log_StepError('The Next button does not exist');
        StopWorkflow: = true;
        exit;
    end;
    Delay(60000);         
end;

procedure DSI_ClickCancelButton;

begin

    Cancelbtn: = Aliases.DSI.DSI_Button_Cancel;
    
    Aliases.DSI.RefreshMappingInfo;
    Aliases.DSI.DSI_Button_Cancel.RefreshMappingInfo;
    if Cancelbtn.Exists then 
    begin
        Log_StepMsg('The Cancel button Exist');
        if Cancelbtn.Visible then 
        begin
            Cancelbtn.ClickButton();
            Log_StepMsg('Click Cancel Button');
        end
        else
        begin
            Log_StepError('The Cancel button is disabled!');
            StopWorkflow: = true;
            exit;
        end;
    end
    else
    begin
        Log_StepError('The Cancel button does not exist');
        StopWorkflow: = true;
    end;        
end;

procedure DSI_AddProductLicense();
var LicensePage,LicenseRowCount,TextBoxEditing;
var ProductKey,SiteMessage,LicenseAssistanceLink;
begin
    try
      // ProductKey: = GetCellValue('DSI_AddProductLicense',aDataID,'I_AddProductLicense');
      // SiteMessage: = GetCellValue('DSI_AddProductLicense',aDataID,'I_SiteMessage');
      
       ProductKey: = 'C73ZAXVYYVHKDGR4N7PJ6YML1D7MWQQDFNYNX5X1-123-456-789-C9';
       SiteMessage: = 'Trial Version';
       
       LicensePage:=Aliases.DSI.DSI_ProductLicensing;
      //Verify Product License Page Exits and Caption is correct.
       if Aliases.DSI.SubTitle.Exists  then
       begin
           if Aliases.DSI.SubTitle.WndCaption='Product Licensing' then
           begin
              Log_StepMsg('The Product License Page Title Display Correct.');
           end else
           begin
              Log_StepMsg('The Product License Page Title Display In-Correct.'+Aliases.DSI.SubTitle.WndCaption);
           end;
       end else
       begin
           Log_StepError('Cannot Find the Product License Page Title.');
       end;
       
       if Aliases.DSI.MainFormHeader.Exists  then
       begin
           if Aliases.DSI.MainFormHeader.WndCaption='View and add licenses' then
           begin
              Log_StepMsg('The Product License Page Header Display Correct.');
           end else
           begin
              Log_StepMsg('The Product License Page Header Display In-Correct.'+Aliases.DSI.SubTitle.WndCaption);
           end;
       end else
       begin
           Log_StepError('Cannot Find the Product License Page Header.');
       end;
        
       if LicensePage.LicenseAssistanceLink.Exists then
       begin
           LicensePage.LicenseAssistanceLink.Click;
           Delay(10000);
           LicenseAssistanceLink: = Sys.Process('iexplore').FindChild('WndCaption','Licensing Assistance - Windows Internet Explorer',3);
           if LicenseAssistanceLink.Exists then
           begin
              Log_StepMsg('Success Launch License Assistance Page.');
              LicenseAssistanceLink.Close;
           end else
           begin
              Log_StepError('Launch License Assistance Page Fail');
           end;
       end;
       
      { if LicensePage.KeysBox.wItemCount='0' then
       begin
           
           if (LicensePage.ProductKeyIcon.Exists) and (LicensePage.ProductKeyIcon.WndCaption='Product Key') then
           begin
              Log_StepMsg('License Key Icon Display Correct!');
           end;
           
           if LicensePage.ProductKeyEdit.Enabled then
           begin
              LicensePage.ProductKeyEdit.Clear;
              LicensePage.ProductKeyEdit.SetText(ProductKey);
              Log_StepMsg('Enter Product Key: '+ProductKey);
           end else
           begin
              Log_StepError('The Enter License Box is Disable.');
           end;
           
           if (LicensePage.SiteMessageIcon.Exists) and (LicensePage.SiteMessageIcon.WndCaption='Site Message') then
           begin
              Log_StepMsg('License site message Icon Display Correct!');
           end;
           
           if LicensePage.SiteMessageEdit.Enabled then
           begin
              LicensePage.SiteMessageEdit.Clear;
              LicensePage.SiteMessageEdit.SetText(SiteMessage);
              Log_StepMsg('Enter Site Message: '+SiteMessage);
           end else
           begin
              Log_StepError('The Enter Key Message Box is Disable.');
           end;
       end else
       begin
           Log_StepError('There is already have License in Bundle.');
       end;}
       
       if LicensePage.dgvKeys.Exists then
       begin
           LicenseRowCount:=LicensePage.dgvKeys.wRowCount;
           TextBoxEditing:= LicensePage.dgvKeys.Panel.DataGridViewTextBoxEditingControl;
           LicensePage.dgvKeys.ClickCell(LicenseRowCount-1, 'License');
           TextBoxEditing.SetText(ProductKey);
           Log_StepMsg('Enter Licnese key: '+ProductKey);
           LicensePage.dgvKeys.ClickCell(LicenseRowCount-1, 'Site Message');
           TextBoxEditing.SetText(SiteMessage);
           Log_StepMsg('Enter Site Message: '+SiteMessage);
       end;   
       
    except
        Log_StepError('Unexcepted error: ' + exceptionmessage);
        StopWorkflow: = true;  
    
    end;
end;

procedure DSI_Uninstall_LaunchInstaller(aDataID);

begin
   try
       ApplicationDataPath: = aqEnvironment.GetEnvironmentVariable('APPDATA') + '\';   
       StrBuildName:=GetCellValue('DSI_Uninstall_LaunchInstaller',aDataID,'I_BuildName');
       
       ApplicationDataPath:=ApplicationDataPath + 'DSI\Build\';
       
       if aqFileSystem.Exists(ApplicationDataPath+StrBuildName) then
       begin
          try
              Sys.OleObject['WScript.Shell'].Run('cmd');        
              if Aliases.cmd.wndConsoleWindowClass.Exists then
              begin
                  Aliases.cmd.wndConsoleWindowClass.Keys('cd /d '+ApplicationDataPath+' [Enter]');
                  Aliases.cmd.wndConsoleWindowClass.Keys(StrBuildName+' /uninstall [Enter]');
                  Log_StepMsg('Launch uninstall winodw. ');
                  Delay(10000);
              end;
              Log_StepMsg('Start to Launch Dell Software Installer Uninstall Window!');
              
              if Aliases.DSI.Exists then
              begin
                 Log_StepMsg('Success to Launch Dell Software Installer Uninstall Window!');
                 Aliases.cmd.wndConsoleWindowClass.Close;
              end;
          except
              Log_StepError('Launch Dell Software UnInstalled Failure to: ' + exceptionmessage);
              StopWorkflow: = true;
              exit;
              raise;
          end;
      end
      else
      begin
          Log_StepError('The Build File Does Not Existence under Folder: ' + ApplicationDataPath + StrBuildName);
          StopWorkflow: = true;
          exit;
      end;
   except
   
   end; 
end;

procedure DSI_Uninstall_SelectProducts();
begin
   
end;

procedure DSI_ProductSelectionPage_VerifyTitle;

var
    StrCaption,StrPageTitle: string;
    
begin
    
    SelectProductPage: = Aliases.DSI.ProductSelectionPage;
    
    if not SelectProductPage.Exists then begin
        Log_StepError('The Product Selection Page Does not Exists!');
        StopWorkflow: = true;
        exit;
    end
    else
    begin
        StrCaption: = Aliases.DSI.SubTitle.WndCaption;
        StrPageTitle: = Aliases.DSI.MainFormHeader.WndCaption;
       
        if(aqString.Compare(StrCaption,'Select the products to install',False) = 0 ) then
            Log_StepMsg('The Product Selection Page Caption Display Correct! Displayed: ' + StrCaption + '; Expected: Select the Quest products that you want to install')
        else
            Log_StepError('The Product Selection Page Caption Display Incorrect! Displayed: ' + StrCaption + '; Expected: Select the Quest products that you want to install'); 
        
        if (aqString.Compare(StrPageTitle,'Select the Dell Software products that you want to install',False) = 0) then
            Log_StepMsg('The Product Selection Page Caption Display Correct! Displayed: ' + StrPageTitle + '; Expected: Select the Products to Install')
        else
            Log_StepError('The Product Selection Page Caption Display Incorrect! Displayed: ' + StrPageTitle + '; Expected: Select the Products to Install'); 
            
    end;
          
end;

procedure DSI_ProductSelectionPage_VerifyProductDetail(aDataID: string);

var
    PnlProducts;

var
    StrCurrectVersion,StrProductName,StrStatusMsg: string;
var
    aStrVersion,aStatusMsg: string;
        
begin

    try
    begin
      //  aStrVersion: = GetCellValue('QI_ProductSelectionPage_VerifyProductDetail',aDataID,'I_Version');
     //   aStatusMsg: = GetCellValue('QI_ProductSelectionPage_VerifyProductDetail',aDataID,'I_StatusMsg');
    
        aStrVersion: = '7.2.0.2922';
        aStatusMsg: = 'Absent';
        try
        begin
            PnlProducts: = Aliases.DSI.ProductSelectionPage.SelectProducts;
    
            Aliases.DSI.RefreshMappingInfo;
            PnlProducts.RefreshMappingInfo;
            if not Pnlproducts.Exists then
            begin
                Log_StepError('The Product Bundle Panel Does Not Exists!');
                StopWorkflow: = true;
                exit;
            end;
    
            StrProductName: = PnlProducts.SelectedCells.Item(2).FormattedValue;
            StrCurrectVersion: = PnlProducts.SelectedCells.Item(5).FormattedValue;
            StrStatusMsg: = PnlProducts.SelectedCells.Item(6).FormattedValue;
            
            Log.Message(aStrVersion);
            Log.Message(StrCurrectVersion);
            
            if aStrVersion = StrCurrectVersion then
                Log_StepMsg('The Product: ' + StrProductName + ' Version Display Correct in Products Band! Displayed: ' + StrCurrectVersion + '; Expected: ' + aStrVersion)
            else
                Log_StepError('The Product: ' + StrProductName + ' Version Display Incorrect in Products Band! Displayed: ' + StrCurrectVersion + '; Expected: ' + aStrVersion);

            if aStatusMsg = StrStatusMsg then
                Log_StepMsg('The Product: ' + StrProductName + ' Status Flag Display Correct in Products Band! Displayed: ' + StrStatusMsg + '; Expected: ' + aStatusMsg)
            else
                Log_StepError('The Product: ' + StrProductName + ' Status Flag Display Incorrect in Products Band! Displayed: ' + StrStatusMsg + '; Expected: ' + aStatusMsg);
        end;
        except
            Log_StepError('Unexception Error: ' + exceptionmessage);
            StopWorkflow: = true;
            exit;
        end;
    end;
    except
        Log_StepError('Unexception Error: ' + exceptionmessage);
        StopWorkflow: = true;
    end;
     
end;

procedure DSI_ProductSelectionPage_SelectProducts(aDataID: string);        
var
    StrSelectAllObj,StrProductPanel,DetailBandGroupObj,ProductObj,ProductChkObj,ProductExit;   
var
    aStrName,StrProductName: string;
var
    i: integer;
    
begin

    aStrName: = GetCellValue('DSI_ProductSelectionPage_SelectProducts',aDataID,'I_ProductName');
    
    Aliases.DSI.RefreshMappingInfo;  
            
    //StrSelectAllObj: = Aliases.QI.QI_frm_Main.QI_Tframe_NewProducts.QI_cb_SelectAll;
    StrProductPanel: = Aliases.DSI.ProductSelectionPage.SelectProducts;
    
    
   Aliases.DSI.ProductSelectionPage.SelectProducts.Refresh;
   Aliases.DSI.ProductSelectionPage.SelectProducts.RefreshMappingInfo;
   if StrProductPanel.wRowCount = 0 then begin
        Log_StepError('There is no Products Listed in Products Panel!');
        StopWorkflow: = true;
        exit;
   end;
  
   ProductExit:=false;
   for i: = 0 to StrProductPanel.wRowCount - 1 do
    begin
       // StrSelectProducts.Keys('[Down]');     
       if IntToStr(StrProductPanel.wValue(i, 0).OleValue)='True' then
       begin
          StrProductPanel.ClickCell(i, 'Select');
       end;                    
    end; 
    
   for i: = 0 to StrProductPanel.wRowCount - 1 do
    begin
       // StrSelectProducts.Keys('[Down]');
        StrProductName: = StrProductPanel.wValue(i, 2).OleValue;
        if StrProductName=aStrName then
        begin
           ProductExit:=true;
           if IntToStr(StrProductPanel.wValue(i, 0).OleValue)<>'True' then
           begin
              StrProductPanel.ClickCell(i, 'Select');
              Log_StepMsg('Select Product '+StrProductName);
           end;
        end                       
    end; 
    if ProductExit=false then
    begin
       Log_StepError('Cannot Find the Product: '+aStrName);
    end;                  

end;

procedure DSI_ProductSelectionPage_HighlightProducts(aDataID: string);

var
    StrProductPanel,DetailBandGroupObj,ProductObj;
    i:int;
var
    aStrName: string;

begin
    
    aStrName: = GetCellValue('QI_ProductSelectionPage_HighlightProducts',aDataID,'I_ProductName');
    
    Aliases.DSI.RefreshMappingInfo;  
            
    //StrSelectAllObj: = Aliases.QI.QI_frm_Main.QI_Tframe_NewProducts.QI_cb_SelectAll;
    StrProductPanel: = Aliases.DSI.ProductSelectionPage.SelectProducts;
    
    
   Aliases.DSI.ProductSelectionPage.SelectProducts.Refresh;
   Aliases.DSI.ProductSelectionPage.SelectProducts.RefreshMappingInfo;
   if StrProductPanel.wRowCount = 0 then begin
        Log_StepError('There is no Products Listed in Products Panel!');
        StopWorkflow: = true;
        exit;
   end;
  
   ProductExit:=false;
   for i: = 0 to StrProductPanel.wRowCount - 1 do
    begin
       // StrSelectProducts.Keys('[Down]');
        StrProductName: = StrProductPanel.wValue(i, 2).OleValue;
        if StrProductName=aStrName then
        begin
           ProductExit:=true;           
           StrProductPanel.ClickCell(i, 'Product Name');
           Log_StepMsg('Hightlight Product '+StrProductName);
           
        end                       
    end; 
    if ProductExit=false then
    begin
       Log_StepError('Cannot Find the Product: '+aStrName);
    end;                                  
end;

procedure DSI_ProductSelectionPage_ValidateCheckedStatus(aDataID: string);

var
    StrProductPanel,DetailBandGroupObj,ProductObj,ProductExit,StrProductName;
    i,IntCount:int;
var
    aStrName,BolChecked: string;

begin

    IntCount : = 0;
    aStrName: = GetCellValue('QI_ProductSelectionPage_ValidateCheckedStatus',aDataID,'I_ProductName');
    BolChecked: = GetCellValue('QI_ProductSelectionPage_ValidateCheckedStatus',aDataID,'I_Checked');
   
   StrProductPanel: = Aliases.DSI.ProductSelectionPage.SelectProducts;  
   Aliases.DSI.ProductSelectionPage.SelectProducts.Refresh;
   Aliases.DSI.ProductSelectionPage.SelectProducts.RefreshMappingInfo;
   if StrProductPanel.wRowCount = 0 then begin
        Log_StepError('There is no Products Listed in Products Panel!');
        StopWorkflow: = true;
        exit;
   end;
  
   ProductExit:=false;
   for i: = 0 to StrProductPanel.wRowCount - 1 do
    begin
       // StrSelectProducts.Keys('[Down]');
        StrProductName: = StrProductPanel.wValue(i, 2).OleValue;
        if StrProductName=aStrName then
        begin
           StrProductPanel.ClickCell(i, 'Product Name');
           ProductExit:=true;       
           if aqConvert.VarToBool(BolChecked) then
            begin
                if Aliases.DSI.ProductSelectionPage.SelectProducts.SelectedRows.Item(0).ReadOnly=false then
                begin
                    if StrProductPanel.wValue(i, 0).OleValue='True'  then 
                        Log_StepMsg('The Product: ' +  aStrName + ' Checked! Current Checked: ' + StrProductPanel.wValue(i, 0).OleValue+'; Expected: ' + BolChecked)
                    else                                     
                        Log_StepError('The Product: ' + aStrName + ' Not Checked! ' + StrProductPanel.wValue(i, 0).OleValue+'; Expected: ' + BolChecked)
                end else
                begin
                    Log_StepMsg('The Product '+aStrName+' already Installed');
                end;     
            end
            else
            begin
                if Aliases.DSI.ProductSelectionPage.SelectProducts.SelectedRows.Item(0).ReadOnly=false then
                begin
                    if (StrProductPanel.wValue(i, 0).OleValue='True') then                   
                        Log_StepError('The Product: ' + aStrName + ' Checked! ' + StrProductPanel.wValue(i, 0).OleValue+'; Expected: ' + BolChecked)
                    else
                        Log_StepMsg('The Product: ' + aStrName + ' Not Checked ' + StrProductPanel.wValue(i, 0).OleValue+'; Expected: ' + BolChecked)
                end else
                begin
                    Log_StepMsg('The Product '+aStrName+' already Installed');
                end;        
            end; 
        end                       
    end; 
    if ProductExit=false then
    begin
       Log_StepError('Cannot Find the Product: '+aStrName);
    end;                                                
end;

procedure DSI_ProductSelectionPage_SetupProductInstallationDirectory(aDataID: string);

const
    ProductInstallationDir = 'Product Installation Directory:';

var
    LblDirLabel,CbRootDir,CbProductDir,ImgProductBrowser,PnlMoreInfo,btnMoreInfo;
    Product,WinBrowseForFolder,SysTreeView,HSBrowseForFolder;
var
    StrProductPath,StrExpProductPath,StrExpRootPath,aProductPath: string;    

begin

    aProductPath: = GetCellValue('QI_ProductSelectionPage_SetupProductInstallationDirectory',aDataID,'I_ProductDirectory');
    
   // CbRootDir: = Aliases.QI.QI_frm_Main.QI_Tframe_NewProducts.QI_cb_RootDir;
    CbProductDir: = Aliases.DSI.ProductSelectionPage.ProductInstallDirectory;
    ImgProductBrowser: = Aliases.DSI.ProductSelectionPage.ProductInstallFolderBrowse;
  //  LblDirLabel: = Aliases.QI.QI_frm_Main.QI_Tframe_NewProducts.QI_lab_DirLabel;
    
    
    Delay(10000);
    Sys.Refresh;
    Aliases.DSI.ProductSelectionPage.RefreshMappingInfo;
    case aqString.ToUpper(aProductPath) of
        'UPGRADE INSTALL':
        begin
            Aliases.DSI.ProductSelectionPage.ProductInstallDirectory.Click;
            Aliases.DSI.ProductSelectionPage.ProductInstallDirectory.Keys('[Down]');
        end
    else
    begin
              
        //Enter Product Installation Directory
        if CbProductDir.Exists then
        begin
            CbProductDir.RefreshMappingInfo;
            if CbProductDir.Enabled then
            begin
                Log_StepMsg('The Product Installation Directory Comobox is Enabled!');
            end
            else
            begin
                Log_StepError('The Prodduct Installation Directory Combox is disabled!');
                StopWorkflow: = true;
                exit;
            end;
        end
        else
        begin
            Log_StepError('The Product Installation Directory Combox does not exists!');
            StopWorkflow: = true;
            exit;
        end;
    
        //verify the Product directory if match with the root directory path
        CbProductDir.RefreshMappingInfo;
        StrExpProductPath: = VarToStr(CbProductDir.wText);
                
        if aProductPath<>'' then
        begin
            //Click Product Browser button
            if ImgProductBrowser.Exists then
            begin
                ImgProductBrowser.Click();
                Log_StepMsg('Click the Product Browse button');
                Delay(5000);
                if Aliases.Win_frm_Main.Exists then
                begin
                    if SelectFolderTreeViewItem(aProductPath,Aliases.Win_frm_Main.SysTreeView) then
                        Log_StepMsg('Success to selected Installation Directory: ' + aProductPath)
                    else
                        Log_StepError('Failed to select installation directory: ' + aProductPath);
        
                    
                    Delay(3000);
                    if Aliases.Win_frm_Main.Exists then
                        Log_StepError('The Browser for Folder window not closed!')
                    else
                        Log_StepMsg('The Browser for Folder window closed!');
                end
                else
                begin
                    Log_StepError('The Browser for Folder Window Does not exists!');
                    StopWorkflow: = true;
                    exit;
                end;
            end
            else
            begin
                Log_StepError('The Product Browser Button Does not exists!');
                StopWorkflow: = true;
                exit;
            end;    
        end
        else
        begin
            Log_StepError('The Product Installation Directory Path is an invalid path!');
            StopWorkflow: = true;
            exit;
        end;
    
        CbProductDir.RefreshMappingInfo;
        StrExpProductPath: = VarToStr(CbProductDir.wText); 
        if UpperCase(aProductPath) = UpperCase(StrExpProductPath) then
            Log_StepMsg('The Product Installation Directory Displayed Text equal to the value that via Browser for Folder Window Selected!Expected: ' + aProductPath + '; Product Directory Displayed: ' + StrExpProductPath) 
        else
            Log_StepError('The Product Installation Directory Displayed Text not equal to the value that via Browser for Folder Window Selected!Expected: ' + aProductPath + '; Product Directory Displayed: ' + StrExpProductPath);       
      end;
    end;        

end;

procedure DSI_PerformInstallationPage_WaitforInstallationFinished;

var
    BtnNext,BtnFinish,WndWarning,StopWatchObj,ErrorDialog;

var
    i: integer;
var SoSSE_Install;    
begin

    StopWatchObj: = HISUtils.StopWatch;
    
    //start timer
    StopWatchObj.Start();
    repeat
    begin
    
        Sys.Refresh;
        if Aliases.DSI.Exists then
        begin
            if i < 2000 then
                Delay(6000)
            else
                break;
            i: = i + 1;
            Aliases.DSI.Refresh;
          //  NameMapping.Sys.QI.QI_frm_Main.PS_pnl_TPanel3.BU_pnl_TPanel2.BU_pnl_TPanel1.Refresh;
          //  NameMapping.Sys.QI.QI_frm_Main.PS_pnl_TPanel3.BU_pnl_TPanel2.BU_pnl_TPanel1.RefreshMappingInfo;
            BtnNext: = Aliases.DSI.DSI_Button_Next;
            BtnFinish: = Aliases.DSI.FindChild('WndCaption','&Finish',3);
          //  ErrorDialog: = Sys.Process('QI').FindChild('WndCaption','Error.');
           // Aliases.QI.QI_TMessageForm_Warning.RefreshMappingInfo;
            //Aliases.SoSSE.SoSSE_InstallWizardForm.RefreshMappingInfo;
       end
       else
            break; 
    end;
    until ((BtnFinish.Exists));
    
    //stop timer
    StopWatchObj.Stop();
    Log_StepMsg('Wait for Installation Process Finished.Execution time : ' + StopWatchObj.ToString);
    
    if i = 2000 then
    begin
        Log_StepError('Wait for installation Timeout!');
        StopWorkflow: = true;
        exit;
    end;
    
   { if Aliases.QI_msiexec.QI_WindowsInstaller.Exists then
    begin
        Log_StepError('Unexpected msi Windows Installer Window Prompted Dureation Installation');
        Aliases.QI_msiexec.QI_WindowsInstaller.Close;
        Aliases.QI.Terminate;
        StopWorkflow: = true;
    end;  }  
   { if Aliases.QI.QI_TMessageForm_Warning.Exists then
    begin
        Log_StepError('Unexpected Window Prompted Dureation Installation!');
        Aliases.QI.QI_TMessageForm_Warning.Close;
        Aliases.QI.Terminate;
        StopWorkflow: = true;
    end;}
    
    SoSSE_Install:=Sys.Find('ProcessName','SoSS*',10,true);
    if SoSSE_Install.Exists then
        DiagnosticServeraccount;
     
    Sys.Refresh;
    Aliases.DSI.RefreshMappingInfo;
    if not Aliases.DSI.Exists then
    begin
        Log_StepError('The Dell Software Installer Closed!');
        StopWorkflow: = true;
    end;
        
end;

{procedure QI_VerifyQuestInstallerSetting(aDataID: string);

var
    LblSettings,FrmQISettings,PageOptions,TabGeneral,EdLogDestination,PbLogDestinatio: OleVariant;
    DfUpdateInfoLocal,PbUpdateInfoLocal: OleVariant;
    PbOK,PbCancel,PbHelp,LblLogDestination,LblUpdateInfo,LblCreatLogFileIn,LblDownLoadFiles: OleVariant;
var
    StrlogDestination,StrFileLocation: string;
var
    aLogDestination,aFileLocation: string;
        
begin

    try
    begin
        aLogDestination: = GetCellValue('QI_VerifyQuestInstallerSetting',aDataID,'I_LogDestination');
        aFileLocation: = GetCellValue('QI_VerifyQuestInstallerSetting',aDataID,'I_FileLocation');
    
        LblSettings: = Aliases.QI.QI_frm_Main.QI_lbl_Settings;
    
        Aliases.QI.QI_frm_Main.RefreshMappingInfo;
        Aliases.QI.QI_frm_Main.Refresh;
        Aliases.QI.QI_frm_Main.QI_lbl_Settings.RefreshMappingInfo;
        if LblSettings.Exists then
            Log_StepMsg('The Quest Installer Settings Hypelink Label Exists!')
        else
        begin
            Log_StepError('The Quest Installer Settings Hypelink Label Does Not Exists!');
            StopWorkflow: = true;
            exit;
        end;
    
        LblSettings.Click();
        Log_StepMsg('Click Quest Installer Settings Hypelink');
    
        Aliases.QI.QI_frm_Main.WaitAliasChild('QI_lbl_Settings',60000);
    
        FrmQISettings: = Aliases.QI.QI_frm_QISettings;
        Aliases.QI.Refresh;
        Aliases.QI.QI_frm_QISettings.Refresh;
        Aliases.QI.QI_frm_QISettings.RefreshMappingInfo;
        if FrmQISettings.Exists then
        begin
            Log_StepMsg('The Quest Installer Settings window prompted!');
            PageOptions: = FrmQISettings.VCLObject('pageOptions');
            TabGeneral: = PageOptions.FindChild('Caption','&General Options');
            PbOK: = FrmQISettings.FindChild('Caption','&OK');
            PbCancel: = FrmQISettings.FindChild('Caption','&Cancel');
            PbHelp: = Aliases.QI.QI_frm_QISettings.QI_pb_Help;
            LblLogDestination: = FrmQISettings.FindChild('Caption','Log Destination'); 
            LblUpdateInfo: = FrmQISettings.FindChild('Caption','Quest Installer File Locations');
            LblCreatLogFileIn: = FrmQISettings.FindChild('Caption','C&reate Log file in:');
            LblDownLoadFiles: = FrmQISettings.FindChild('Caption','Do&wnload setup files to:');
            DfUpdateInfoLocal: = Aliases.QI.QI_frm_QISettings.QI_page_Options.QI_tab_General.QI_df_UpdateInfoLocal;
            PbUpdateInfoLocal: = Aliases.QI.QI_frm_QISettings.QI_page_Options.QI_tab_General.QI_pb_UpdateInfoLocal;
            EdLogDestination: = Aliases.QI.QI_frm_QISettings.QI_page_Options.QI_tab_General.QI_ed_LogDestination;
            PbLogDestinatio: = Aliases.QI.QI_frm_QISettings.QI_page_Options.QI_tab_General.QI_pb_LogDestination; 
          
            //Verify Gnneral Options Tab if exists
            if TabGeneral.Exists then
            begin
                Log_StepMsg('The General Options Tab Exist in Quest Installer Settings page!');
                //Verify Log Destination Label
                if LblLogDestination.Exists then
                    Log_StepMsg('The Log Destination Label Visible On General Tab Page!')
                else
                    Log_StepError('The Log Destination Label Not Visible On General Tab Page!');
                //Verify Create Log File In Label
                if LblCreatLogFileIn.Exists then
                    Log_StepMsg('The Create Log File In Label Visible On General Tab Page!')
                else
                    Log_StepError('The Create Log File In Label Not Visible On General Tab Page!');
                //Verify Quest Installer File locations Label
                if LblUpdateInfo.Exists then
                    Log_StepMsg('The Quest Installer File locations Label Visible On General Tab Page!')
                else
                    Log_StepError('The Quest Installer File locations Label Not Visible On General Tab Page!');
                //Verify DownLoad setup files to Label
                if LblDownLoadFiles.Exists then
                    Log_StepMsg('The DownLoad setup files Label Visible On General Tab Page!')
                else
                    Log_StepError('The DownLoad setup files Label Not Visible On General Tab Page!');
                //Setup Log file destination    
                if aLogDestination <> nil then
                begin
                    //Verify Log Destination Button
                    if PbLogDestinatio.Exists then
                    begin
                        Log_StepMsg('The Log Destination Browse button exist!');
                        PbLogDestinatio.Click();
                        Log_StepMsg('Click Log Destination Browse button!');
                        Delay(5000);
                        if Aliases.QI.Win_frm_Main.Exists then
                        begin
                            Log_StepMsg('The Browse for Folder window prompt after click Browse button!');
                            if SelectFolderTreeViewItem(aLogDestination,Aliases.QI.Win_frm_Main.SysTreeView) then
                                Log_StepMsg('Select Log file Destination: ' + aLogDestination + ' Successed!')
                            else
                                Log_StepError('Select the Log File Destination : ' + aLogDestination + ' Failed!');
                            if Aliases.QI.Win_frm_Main.Win_btn_OK.Exists then
                            begin
                                Aliases.QI.Win_frm_Main.Win_btn_OK.ClickButton;
                                Log_StepMsg('Click OK Button!');
                            end;
                            Delay(5000);
                            if Aliases.QI.Win_frm_Main.Exists then
                            begin
                                Log_StepError('The Browse for Folder window failed!');
                                exit;
                            end
                            else
                                Log_StepMsg('The Browse for Folder window clsoed!');
                        end
                        else
                            Log_StepError('The Browse for Folder window not prompt after click Browse button!');
                    end
                    else
                        Log_StepError('The Log Destination Browse Button Does not exists!'); 
                    StrLogDestination: = EdLogDestination.wText;
                    if UpperCase(StrLogDestination) = UpperCase(aLogDestination) then
                        Log_StepMsg('The Log Destination Comobox displayed text is equal to the Browse window selected path')
                    else
                        Log_StepError('The Log Destination Comobox displayed text is not equal to the Browse window selected path');       
                end;
          
                //Setup Quest Installer file location    
                if aFileLocation <> nil then
                begin
                    //Verify Quest installer file location browse Button
                    if PbUpdateInfoLocal.Exists then
                    begin
                        Log_StepMsg('The Quest Installer File Locations Browse button exist!');
                        PbUpdateInfoLocal.Click();
                        Log_StepMsg('Click Folder Browse button!');
                        Delay(5000);
                        if Aliases.QI.Win_frm_Main.Exists then
                        begin
                            Log_StepMsg('The Browse for Folder window prompt after click Browse button!');
                            if SelectFolderTreeViewItem(aFileLocation,Aliases.QI.Win_frm_Main.SysTreeView) then
                                Log_StepMsg('Select Quest Installer File Locations: ' + aFileLocation + ' Successed!')
                            else
                                Log_StepError('Select the Quest Installer File Locations : ' + aFileLocaton + ' Failed!');
                            if Aliases.QI.Win_frm_Main.Win_btn_OK.Exists then
                            begin
                                Aliases.QI.Win_frm_Main.Win_btn_OK.ClickButton;
                                Log_StepMsg('Click OK Button!');
                            end;
                            Delay(5000);
                            if Aliases.QI.Win_frm_Main.Exists then
                            begin
                                Log_StepError('The Browse for Folder window failed!');
                                exit;
                            end
                            else
                                Log_StepMsg('The Browse for Folder window clsoed!');
                        end
                        else
                            Log_StepError('The Browse for Folder window not prompt after click Browse button!');
                    end
                    else
                        Log_StepError('The Quest Installer File Locations Browse Button Does not exists!'); 
                    StrFileLocation: = DfUpdateInfoLocal.wText;
                    if UpperCase(StrFileLocation) = UpperCase(aFileLocation) then
                        Log_StepMsg('The Quest Installer File Locations Comobox displayed text is equal to the Browse window selected path')
                    else
                        Log_StepError('The Quest Installer File Locations Comobox displayed text is not equal to the Browse window selected path');       
                end;
            
            end
            else
                Log_StepError('The General Options Tab Does Not Exists in Quest Installer Setttings Page!','QISettings');
            //Verify OK button
            if PbOK.Exists then
            begin
                Log_StepMsg('The OK Button Exists in Quest Installer Settings Page!');
                if PbOK.Enabled then
                    Log_StepMsg('The OK Button is enabled!')
                else
                    Log_StepError('The OK Button is disabled!');
            end
            else
                Log_StepError('The OK Button does not exists in Quest Installer Settings Page!'); 
            //Verify Cancel button
            if PbCancel.Exists then
            begin
                Log_StepMsg('The Cancel Button Exists in Quest Installer Settings Page!');
                if PbCancel.Enabled then
                    Log_StepMsg('The Cancel Button is enabled!')
                else
                    Log_StepError('The Cancel Button is disabled!');
            end
            else
                Log_StepError('The Cancel Button does not exists in Quest Installer Settings Page!');
            //Verify Help button
            PbHelp.RefreshMappingInfo;
            if PbHelp.Exists then
            begin
                Log_StepMsg('The Help Button Exists in Quest Installer Settings Page!');
                if PbHelp.Enabled then
                begin
                    Log_StepMsg('The Help Button is Visible!');
                    PbHelp.Click();
                    Log_StepMsg('Click The Help Button!');
                    Delay(6000);
                    if Aliases.QI.QI_HHParent_HelpWindow.Exists then
                    begin
                        Log_StepMsg('The Quest Installer Help Document Opened!');
                        Aliases.QI.QI_HHParent_HelpWindow.Close();
                    end
                    else
                        Log_StepError('The Quest Installer Help Document Does not Open!');
                end
                else
                    Log_StepError('The Help Button is disabled!');
            end
            else
                Log_StepError('The Help Button does not exists in Quest Installer Settings Page!');
            PbOK.ClickButton;
            Log_StepMsg('Click OK Button!');
            Delay(6000);
            if FrmQISettings.Exists then
                Log_StepError('The Quest Installer Settings window not clsoe!')
            else
                Log_StepMsg('The Queset Installer Window clsoed!');      
        end 
        else
        begin
            Log_StepError('The Quest Installer Settings window not prompt!'); 
            StopWorkflow: = true;      
        end;
    end;
    except
        Log_StepError('Unexception Error: ' + exceptionmessage);
        StopWorkflow: = true;
    end;
  
end;}

procedure DSI_ClickInstallButton;
var
    BtnInstall,a: OleVariant;
var
    StrSelectProducts,ProductObj;
var
    StrProductName,StrProductInstallDir,StrPrdVersion: string;
var
    i,IntCount: integer;
        
begin

    {store the product install directory befor click install button}
    try
    
        StrSelectProducts: = Aliases.DSI.ProductSelectionPage.SelectProducts;
    
        //StrProductPanel.SetFocus;
        Aliases.DSI.ProductSelectionPage.SelectProducts.ClickCell(0, 'Product Name');
        for i: = 0 to StrSelectProducts.wRowCount - 1 do
        begin
            StrSelectProducts.RefreshMappingInfo;
            
            if (IntToStr(StrSelectProducts.wValue(i, 0).OleValue)='0') or (IntToStr(StrSelectProducts.wValue(i, 0).OleValue)='1') then
            begin
                StrSelectProducts.Keys('[Down]');
            end else
            begin
               if ( StrSelectProducts.wValue(i, 0).OleValue='True') and (StrSelectProducts.wValue(i, 6).OleValue='Absent') then 
                    begin 
                        Aliases.DSI.ProductSelectionPage.SelectProducts.RefreshMappingInfo;
                        StrProductName: = StrSelectProducts.wValue(i, 2);
                        StrProductInstallDir: = Aliases.DSI.ProductSelectionPage.ProductInstallDirectory.wText;
                        StrPrdVersion: = Aliases.DSI.ProductSelectionPage.SelectProducts.SelectedCells.Item(5).FormattedValue;
                        
                        if ((UpdateInstallDirectoryRecords(StrProductInstallDir,StrPrdVersion,StrProductName))) then
                            Log_StepMsg('Update Product: ' + StrProductName + ' Install Directory Records: ' + StrProductInstallDir + ' Successed!')
                        else
                            Log_StepError('Update Product: ' + StrProductName + ' Install Directory Records: ' + StrProductInstallDir + ' Failed!');
                    end; 
                StrSelectProducts.Keys('[Down]');
            end;                   
        end;
        
        BtnInstall: = Aliases.DSI.FindChild('WndCaption','&Install',3);
        //BtnInstall: = Aliases.QI.QI_frm_Main.QI_TButton_Install;
        Aliases.DSI.Refresh;
    
        if BtnInstall.Exists then
        begin
            Log_StepMsg('The Install button Exists!');
            Aliases.DSI.Refresh;
            if BtnInstall.Enabled then
            begin
                Log_StepMsg('The Install button is visible on Product Selection Page!');
                BtnInstall.Refresh;
                BtnInstall.ClickButton;
                Log_StepMsg('Click Install Button!');
                
            end
            else
            begin
                Log_StepError('The Install button is disabled!');
                StopWorkflow: = true;
                exit;
            end;
        end
        else
        begin
            Log_StepError('The Install button does not exist!');
            StopWorkflow: = true;
        end;
    except
        Log_StepError('Unexcepted error: ' + exceptionmessage);
        StopWorkflow: = true;    
    end;

end;

procedure DSI_ClickFinishButton;

var
    BtnFinish;
begin

    Aliases.DSI.WaitChild('&Finish',30000);
    BtnFinish: = Aliases.DSI.FindChild('WndCaption','&Finish',3);
    //BtnFinish: = Aliases.QI.QI_frm_Main.QI_TButton_Finish;
    
    Aliases.DSI.RefreshMappingInfo;
   // NameMapping.Sys.QI.QI_frm_Main.PS_pnl_TPanel3.BU_pnl_TPanel2.BU_pnl_TPanel1.Refresh;
    if BtnFinish.Visible then
    begin
        BtnFinish.Click();
        //Runner.CallObjectMethodAsync(BtnFinish,'Click');
        Log_StepMsg('Click Finish button!');
    end
    else
    begin    
        Log_StepError('The Finish Button Does not exists!');
        Aliases.DSI.Close();
        //StopWorkflow: = true;
        exit;
    end;

    Delay(60000);
    
    sys.Refresh;
    
    if Aliases.DSI.Exists then
    begin
        Aliases.DSI.Close;
    end
    else
        Log_StepMsg('The DSI Porcess Closed after click Finish Button!');

    Sys.OleObject['WScript.Shell'].Run('cmd /c rd /s /q ' + '"' + ApplicationDataPath + '"' + 'DSI\',0,True);
    
end;

{procedure QI_PerformInstallationPage_VerifyInstallProgress;

const
    CancellationCaption = 'Click Cancel to cancel installation of products not yet installed.  Current in-progress installation will continue';
    ThirdPageTitle = 'Perform Installation';
    ThirdPageCaption = 'All selected Products are now being installed';
    
var
    BtnCancel,BtnFinish,LabCancel,LabInstallStatus,LabTotalProgress;
    ProductPage,PageTitle,PageCaption;
    regEX;
var
    StrPageTitle,StrPageCaption,StrStatusText,StrCancelLabText: string;

begin
    
    ProductPage: = Aliases.QI.QI_frm_Main.QI_Tframe_NewProducts;
    BtnCancel: = Aliases.QI.QI_frm_Main.QI_TButton_Cancel;
    BtnFinish: = Aliases.QI.QI_frm_Main.QI_TButton_Finish;
    LabCancel: = Aliases.QI.QI_frm_Main.QI_Tframe_NewProducts.QI_lab_CancelLabel;
    LabInstallStatus: = Aliases.QI.QI_frm_Main.QI_Tframe_NewProducts.QI_lab_InstallStatus;
    LabTotalProgress: = Aliases.QI.QI_frm_Main.QI_Tframe_NewProducts.QI_lab_TotalProgress;
    
    if not ProductPage.Exists then
    begin
        Log_StepError('The Perform Installation Page Does not exists!');
        StopWorkflow: = true;
        exit;
    end;
    
    StrPageTitle: = ProductPage.Title;
    StrPageCaption: = ProductPage.Caption;
    
    BtnCancel.RefreshMappingInfo;
    BtnFinish.RefreshMappingInfo;
    if BtnCancel.Exists then
    begin
        BtnCancel.RefreshMappingInfo;
        if not BtnCancel.Visible then
        begin
            Log_StepMsg('The Perform Installation Progress have Completed!');
            StopWorkflow: = true;
            exit;
        end;
    end;
    
    
    //verify Page Title
    if StrPageTitle = ThirdPageTitle then
        Log_StepMsg('The Perform Installation page Title Display Correct! Displayed: ' + StrPageTitle + '; Expected: ' + ThirdPageTitle)
    else
        Log_StepError('The Perform Installation page Title Display Incorrect! Displayed: ' + StrPageTitle + '; Expected: ' + ThirdPageTitle);
        
    //verify Page Caption
    if StrPageCaption = ThirdPageCaption then
        Log_StepMsg('The Perform Installation page Caption Display Correct! Displayed: ' + StrPageCaption + '; Expected: ' + ThirdPageCaption)
    else
        Log_StepError('The Perform Installation page Caption Display Incorrect! Displayed: ' + StrPageCaption + '; Expected: ' + ThirdPageCaption);
    
    //verify Cancellation Label
    if LabCancel.Visible then
    begin
        StrCancelLabText: = LabCancel.Caption;
        if StrCancelLabText = CancellationCaption then
            Log_StepMsg('The Cancellation Label Text Display Correct! Displayed: ' + StrCancelLabText + '; Expected: ' + CancellationCaption)
        else
            Log_StepError('The Cancellation Label Text Display Incorrect! Displayed: ' + StrCancelLabText + '; Expected: ' + CancellationCaption);
    end
    else
        Log_StepError('The Cancellation Label Does Not Visible On Perform Installation Page!');
    
    //Verify Install Status Label
    if LabInstallStatus.Visible then
    begin
        StrStatusText: = LabInstallStatus.Caption;
        //define the RegExpr object
        regEx: = HISUtils.RegExpr;
        regEx.InputString: = StrStatusText;
        //define the regular express
        regEx.Expression: = 'Installing component \d of \d';
        regEx.ExecPos();
        //verify the Status text if match the defined regular express
        if  regEx.Match[0] <> '' then
            Log_StepMsg('The Install Status Label Display Correct! Displayed: ' + StrStatusText)
        else
            Log_StepError('The Install Staus label Display Incorrect! Displayed: ' + StrStatusText);
    end
    else
        Log_StepError('The Product Install Progress Status label Does Not Visible On Page!');
    
    //verify All install progress
    if LabTotalProgress.Visible then
        Log_StepMsg('The Total Progress bar Visible on Page While Perform Installation!')
    else
        Log_StepError('The Total Progress bar Not Visible on Page While Perform Installation!');
   
end;}

procedure DSI_ChangeLanguage(aDataID);
var StrLanguage;
begin
   try
      StrLanguage: = GetCellValue('QI_BundleLanguage',aDataID,'I_BundleLanguage');
      if Aliases.DSI.Exists then
      begin
        if Aliases.DSI.LanguageIcon.Exists then
        begin
           if Aliases.DSI.LanguageIcon.WndCaption='Language' then
           begin
              Log_StepMsg('The Language Icon Caption is Correct.')
           end else
           begin
              Log_StepError('The Language Icon Caption is in-Correct.')
           end;
        end else
        begin
           Log_StepError('The Language Icon do not Display in Page.')
        end;
        if  Aliases.DSI.ChangeLanguage.Exists then
        begin
            Aliases.DSI.ChangeLanguage.ClickItem(StrLanguage);
            Delay(3000);
            Log_StepMsg('Change Bundle to Language: '+StrLanguage);
        end
        else
        begin
            Log_StepError('Cannot Find the Change Language Button')
        end;
      end
      else
      begin
         Log_StepError('Dell Software Installer Not Opened!');
      end;
   except
      Log_StepError('Unexception Error: ' + exceptionmessage);
      StopWorkflow: = true;
   end;
end;

procedure DSI_UninstallProducts(aDataID);
var StrProductsName,StrUninstallString,StrProductVersion;
var StrInstallFolder,StrInstallPath;
begin
    StrProductsName: = GetCellValue('QI_UninstallProducts',aDataID,'I_ProductsName');
    StrUninstallString: = GetCellValue('QI_UninstallProducts',aDataID,'I_UninstallString');
    StrProductVersion: = GetCellValue('QI_UninstallProducts',aDataID,'I_Version');
   
    StrInstallFolder:=GetInstallDirectoryTableRecord(StrProductsName,StrProductVersion);
    
    if Aliases.cmd.wndConsoleWindowClass.Exists then
    begin
          Aliases.cmd.wndConsoleWindowClass.Close();     
    end;
    
    if aqFileSystem.Exists(StrInstallFolder) then
    begin
       Sys.OleObject['WScript.Shell'].Run('cmd '); 
       if Aliases.cmd.wndConsoleWindowClass.Exists then
       begin
          Aliases.cmd.wndConsoleWindowClass.Keys('msiexec '+StrUninstallString+' [Enter]');
          Log_StepMsg('Uninstall Product: '+StrProductsName);
       end;
    end 
    else
    begin
       Log_StepError('Product '+StrProductsName+' do not installed.');
       exit;
    end;
    Delay(180000);
    Sys.Refresh;
    if StrProductsName='Toad™ for IBM® DB2® LUW' then
    begin
        StrInstallPath:=StrInstallFolder+'\toad.exe';
        if aqFile.Exists(StrInstallPath) then
        begin
           Log_StepError('Uninstall Products: '+StrProductsName+' Faild')
        end
        else
        begin
           Log_StepMsg('Success Uninstall Products: '+StrProductsName);
        end;
    end else
    if StrProductsName='Toad™ Data Modeler' then
    begin
        StrInstallPath:=StrInstallFolder+'\Bin\TDM.exe';
        if aqFile.Exists(StrInstallPath) then
        begin
           Log_StepError(' Uninstall Products: '+StrProductsName+' Faild')
        end
        else
        begin
           Log_StepMsg('Success Uninstall Products: '+StrProductsName);
        end;
    end else
    if StrProductsName='SQL Optimizer for IBM® DB2® LUW' then
    begin
        StrInstallPath:=StrInstallFolder+'\QuestSQLOptimizer_DB2LUW.exe';
        if aqFile.Exists(StrInstallPath) then
        begin
           Log_StepError('Uninstall Products: '+StrProductsName+' Faild')
        end
        else
        begin
           Log_StepMsg('Success Uninstall Products: '+StrProductsName);
        end;
    end else
    if StrProductsName='Spotlight™ on IBM® DB2® LUW' then
    begin
       StrInstallPath:=StrInstallFolder+'\Console\Spotlight.exe';
        if aqFile.Exists(StrInstallPath) then
        begin
           Log_StepError('Uninstall Products: '+StrProductsName+' Faild')
        end
        else
        begin
           Log_StepMsg('Success Uninstall Products: '+StrProductsName);
        end;
    end else
    if StrProductsName='Benchmark Factory™ for Databases' then
    begin
       StrInstallPath:=StrInstallFolder+'\bin\BFactory.exe';
        if aqFile.Exists(StrInstallPath) then
        begin
           Log_StepError('Uninstall Uninstall Products: '+' Faild')
        end
        else
        begin
           Log_StepMsg('Success Uninstall Products: '+StrProductsName);
        end;
    end else
    if (StrProductsName='Toad™ for IBM® DB2® z/OS®') or (StrProductsName='Toad™ for IBM® DB2® z/OS® Trial') then
    begin
       StrInstallPath:=StrInstallFolder+'\toad.exe';
        if aqFile.Exists(StrInstallPath) then
        begin
           Log_StepError('Uninstall Uninstall Products: '+' Faild')
        end
        else
        begin
           Log_StepMsg('Success Uninstall Products: '+StrProductsName);
        end;
    end else
    if StrProductsName='SQL Optimizer for IBM® DB2® z/OS®' then
    begin
       StrInstallPath:=StrInstallFolder+'\Quest SQL Optimizer for DB2 zOS.exe';
        if aqFile.Exists(StrInstallPath) then
        begin
           Log_StepError('Uninstall Uninstall Products: '+StrProductsName+' Faild')
        end
        else
        begin
           Log_StepMsg('Success Uninstall Products: '+StrProductsName);
        end;
    end;
    Aliases.cmd.wndConsoleWindowClass.Close();
end;

procedure DSI_ClickUninstallButton;
var UninstalBtn;
begin
    try
       if Aliases.DSI.Exists then
       begin
          UninstalBtn:=Aliases.DSI.FindChild('WndCaption','Uninstall','2');
          if UninstalBtn.Exists  then
          begin
             if UninstalBtn.Enabled then
             begin
                UninstalBtn.Click();
                Log_StepMsg('Click the Uninstall Button');
             end else
             begin
                Log_StepError('The Uninstall Button is Disable.');
                exit;
             end;   
          end;
       end;
    except
       Log_StepError('Unexception Error: ' + exceptionmessage);
       StopWorkflow: = true;
    end;
end;

procedure DSI_ValidateShortcutAndKeyFile(aDataID: string);

var
    StrPrdName,StrAllusersShortPath,StruserShortPath,BExistence: string;

begin

    StrPrdName: = GetCellValue('QI_ValidateShortcutAndKeyFile',aDataID,'I_ProductName');
    BExistence: = GetCellValue('QI_ValidateShortcutAndKeyFile',aDataID,'I_Existence');
    
    StrAllUsersShortPath: = GetSpecialFolder('AllUsersDesktop');
    StruserShortPath: = GetSpecialFolder('Desktop');
    
    if BExistence = 'True' then
    begin
        if (aqFile.Exists(StrAllUsersShortPath + '\' + StrPrdName + '.lnk')) or (aqFile.Exists(StrUserShortPath + '\' + StrPrdName + '.lnk'))then
        begin
            Log_StepMsg('The Product: ' + StrPrdName + ' Shortcut Visible on Desktop!');
        end
        else
            Log_StepError('The Product: ' + StrPrdName + ' Shortcut Not Visible on Desktop!');
   end
   else
   begin
        if ((aqFile.Exists(StrAllUsersShortPath + '\' + StrPrdName + '.lnk')) or (aqFile.Exists(StrUserShortPath + '\' + StrPrdName + '.lnk'))) then
        begin
            Log_StepError('The Product: ' + StrPrdName + ' Shortcut Visible on Desktop!');
        end
        else
            Log_StepMsg('The Product: ' + StrPrdName + ' Shortcut Not Visible on Desktop!');  
   end; 
           
    
end;

procedure DSI_SetUpTestEnvironment(aDataID: string);

var
    StrParameters,StrValue,FolderName: string;
var
    i: integer;
    
begin

    StrParameters: = GetCellValue('QI_SetUpTestEnvironment',aDataID,'I_Parameters');
    StrValue: = GetCellValue('QI_SetUpTestEnvironment',aDataID,'I_Value');
    
    case UpperCase(StrParameters) of 
        'CREATE FOLDER':
        begin
            for i: = 0 to BuiltIn.GetListCount(StrValue,';') - 1 do
            begin
                FolderName: = BuiltIn.GetListItem(StrValue,i,';');
                try
                begin
                    if aqFileSystem.Exists(FolderName) then
                        Sys.OleObject['WScript.Shell'].Run('cmd /c rd /s /q ' + FolderName,0,true); 
                    Sys.OleObject['WScript.Shell'].Run('cmd /c mkdir ' + FolderName,0,true);
                    Log_StepMsg('Created Folder: ' + FolderName);
                end;
                except
                    Log_StepError('Unexcepted Error: ' + exceptionmessage);
                    StopWorkflow: = true;
                    exit;
                end;
            end;
        end;
    end;

end;

procedure DiagnosticServeraccount;
var SoSSE_Install,Btnnext,Domain,Username,Password;
var Instance,Radio,PlaybackUser,PlaybackPassword,PlaybackDatabase,DatabaseName,BtnCreate;
var PlaybackDatabase_Radio,PlaybackDatabase_User,PlaybackDatabase_Password,btnOK;
var OK_Info;
var Btnstart;
var h;
begin
  SoSSE_Install:= Sys.Find('ProcessName','SoSS*',10,true);
   if not SoSSE_Install.Exists then
    begin
        Log_StepError('The Spotlight on SQL Server Desktop Installation Wizard does not exists!');
        StopWorkflow: = true;
        exit;
    end;
   
  
   //Click Next button with default setting in installation folder page
   Btnnext:=SoSSE_Install.Find('WndCaption','&Next >',10);
   if Btnnext.Exists then
   begin
      Btnnext.Click;
      Delay(1000)
   end;
    
   //Diagnostic server service account   
   Domain:=SoSSE_Install.Find('ObjectIdentifier','edtServerDomain',10,true);
   if Domain.Exists then
   begin
      Domain.SetText(Sys.HostName);
      Log_StepMsg('Enter the Domain '+ Sys.HostName);
   end
   else
   begin
        Log_StepError('The Domain Combox does not exists!');
        StopWorkflow: = true;
        exit;
   end;
   Username:=SoSSE_Install.Find('ObjectIdentifier','edtServerUser',10,true);
   if Username.Exists then
   begin
      Username.SetText(Sys.UserName);
      Log_StepMsg('Enter the User '+ Sys.UserName);
   end
   else
   begin
        Log_StepError('The User Combox does not exists!');
        StopWorkflow: = true;
        exit;
   end;
   Password:=SoSSE_Install.Find('ObjectIdentifier','edtServerPassword',10,true);
   if Password.Exists then
   begin
      Password.SetText('sqlexp!23');
      Log_StepMsg('Enter the Password: sqlexp!23');
   end
   else
   begin
        Log_StepError('The Password Combox does not exists!');
        StopWorkflow: = true;
        exit;
   end;
   
   if Btnnext.Exists and Btnnext.Enabled then
   begin
      Btnnext.Click;
      Delay(1000)
   end;
  
   //Configure the spotlight playback database 
   Btnstart:=SoSSE_Install.Find('WndCaption','S&tart >',10);
  if  not Btnstart.Exists then
  begin    
        Instance:=SoSSE_Install.Find('ObjectIdentifier','cmbPlaybackInstance',10,true);
        if Instance.Exists then
        begin
           Instance.SetText(SoSSEInstance);
           Log_StepMsg('Enter the Instance '+ SoSSEInstance);
        end
        else
        begin
           Log_StepError('The Instance Combox does not exists!');
           StopWorkflow: = true;
           exit;
        end;
   
       Radio:=SoSSE_Install.Find('Caption','&SQL Server authentication',10,true);
       if Radio.Exists then
       begin
          Radio.Click;
          Log_StepMsg('Click SQL Server Authentication Radio Button!');
       end
       else
       begin
          Log_StepError('The SQL Server Authentication Radio button does not exists!');
          StopWorkflow: = true;
          exit;
       end;
    
       PlaybackUser:=SoSSE_Install.Find('ObjectIdentifier','edtPlaybackUser',10,true);
       if PlaybackUser.Exists then
       begin
          PlaybackUser.SetText(SoSSEUser);
          Log_StepMsg('Enter the PlaybackUser '+ SoSSEUser);
       end
       else
       begin
          Log_StepError('The PlaybackUser Combox does not exists!');
          StopWorkflow: = true;
          exit;
       end; 
   
       PlaybackPassword:=SoSSE_Install.Find('ObjectIdentifier','edtPlaybackPassword',10,true);
       if PlaybackPassword.Exists then
       begin
          PlaybackPassword.SetText(SoSSEPassword);
          Log_StepMsg('Enter the PlaybackPassword '+ SoSSEPassword);
       end
       else
       begin
          Log_StepError('The PlaybackPassword Combox does not exists!');
          StopWorkflow: = true;
          exit;
       end; 
   
       Delay(3000);
    DatabaseName:=GetDatabaseName(SoSSEInstance,SoSSEUser,SoSSEPassword,SoSSEDatabaseName);
    if  DatabaseName=SoSSEDatabaseName then
     begin  
       PlaybackDatabase:=SoSSE_Install.Find('ObjectIdentifier','cmbPlaybackDatabase',10,true);
       if PlaybackDatabase.Exists then
       begin
          PlaybackDatabase.SetText(SoSSEDatabaseName);
          Log_StepMsg('Enter the PlaybackDatabase '+ SoSSEDatabaseName);
       end
       else
       begin
          Log_StepError('The PlaybackDatabase Combox does not exists!');
          StopWorkflow: = true;
          exit;
       end;  
     end
    else
     begin
       PlaybackDatabase:=SoSSE_Install.Find('ObjectIdentifier','cmbPlaybackDatabase',10,true);
       if PlaybackDatabase.Exists then
       begin
          PlaybackDatabase.SetText(SoSSEDatabaseName);
          Log_StepMsg('Enter the PlaybackDatabase '+ SoSSEDatabaseName);
       end
       else
       begin
          Log_StepError('The PlaybackDatabase Combox does not exists!');
          StopWorkflow: = true;
          exit;
       end; 
       
       BtnCreate:=SoSSE_Install.Find('ObjectIdentifier','btnPlaybackCreate',10,true);
       if BtnCreate.Exists then
       begin
          BtnCreate.click;
          Log_StepMsg('Click the Create Button.');
       end
       else
       begin
          Log_StepError('The Create Button does not exists!');
          StopWorkflow: = true;
          exit;
       end;
      //Create Playback Database 
       PlaybackDatabase_Radio:=SoSSE_Install.Find('ObjectIdentifier','rdoSQLAuth',10,true);
       if PlaybackDatabase_Radio.Exists then
       begin
          PlaybackDatabase_Radio.click;
          Log_StepMsg('Click SQL Server authentication Radio.');
       end
       else
       begin
          Log_StepError('The SQL Server authentication Radio does not exists!');
          StopWorkflow: = true;
          exit;
       end;
       
       PlaybackDatabase_User:=SoSSE_Install.Find('ObjectIdentifier','editUser',10,true);
       if PlaybackDatabase_User.Exists then
       begin
          PlaybackDatabase_User.Keys(SoSSEUser);
          Log_StepMsg('Enter the SQL Server User.');
       end
       else
       begin
          Log_StepError('The SQL Server authentication User combox does not exists!');
          StopWorkflow: = true;
          exit;
       end;
       
       PlaybackDatabase_Password:=SoSSE_Install.Find('ObjectIdentifier','editPassword',10,true);
       if PlaybackDatabase_Password.Exists then
       begin
          PlaybackDatabase_Password.Keys(SoSSEPassword);
          Log_StepMsg('Enter the SQL Server Password.');
       end
       else
       begin
          Log_StepError('The SQL Server authentication Password combox does not exists!');
          StopWorkflow: = true;
          exit;
       end;
       btnOK:=SoSSE_Install.Find('ObjectIdentifier','btnOK',10,true);
       if btnOK.Exists then
       begin
          btnOK.Click;
          Log_StepMsg('Click the Create Button.');
       end
       else
       begin
          Log_StepError('The Create Button does not exists!');
          StopWorkflow: = true;
          exit;
       end;
     //The promt information display and closed  it;
       OK_Info:=SoSSE_Install.Find('ObjectIdentifier','OK',10,true);
       if OK_Info.Exists then
       begin
          OK_Info.Click;
          Log_StepMsg('Close the prompt information.');
       end
       else
       begin
          Log_StepError('The prompt information donot display!');
          exit;
       end;
     end;
   
   Delay(2000);
   Btnnext:=SoSSE_Install.Find('WndCaption','&Next >',10);
   if Btnnext.Exists then
   begin
      Btnnext.Click;
      Delay(1000)
   end;
   //Click Start button to start install
    Btnstart:=SoSSE_Install.Find('WndCaption','&Next >',10);
    Btnstart.Click;
   //Ready to install page
   Btnstart:=SoSSE_Install.Find('WndCaption','S&tart >',10);
   Btnstart.Click;
   Delay(1000)
  end
  else
   begin
      Btnstart:=SoSSE_Install.Find('WndCaption','S&tart >',10);
      Btnstart.Click;
      Delay(1000)
   end;


   //updating system and finish page
   repeat
        if h<300 then
            Delay(1000)
       else
            break;
       h:=h+1;
   until SoSSE_Install.Find('WndCaption', '&Finish', 10).Exists;
   
   if SoSSE_Install.Find('Caption', '&Start Spotlight', 10).Exists then
   begin
       //if SoSSE_Install.Find('Caption', '&Start Spotlight', 10).Checked = true then
           SoSSE_Install.Find('Caption', '&Start Spotlight', 10).Click();
        
   end;
   SoSSE_Install.Find('WndCaption', '&Finish', 10).ClickButton;
    
end;

procedure DropSpotlightDesktopPlaybackDatabase;

var
    ADOCON1,ConnString,ADORec1,SQLCMDText;

begin

    try
        ADOCon1: = ADO.CreateADOConnection;
        ConnString: = 'Driver={SQL Server};Server=' + SoSSEInstance + ';Database=master;Uid=' + SoSSEUser + ';Pwd=' + SoSSEPassword;
        ADOCon1.ConnectionString: = ConnString;
        ADOCon1.LoginPrompt: = false;
        ADOCon1.Open;
        SQLCMDText: = 'IF EXISTS (SELECT name FROM sys.databases WHERE name = N' + '''' + 'SpotlightDesktopPlayback''' + ')' + chr(13) +
                    'DROP DATABASE SpotlightDesktopPlayback';
        ADOCon1.Execute_(SQLCMDText);
        ADOCon1.Close;
    except
        Log_StepError('Drop Database Failed!Reasons: ' + exceptionmessage);
        ADOCon1.Close
    end;
    
end;

procedure SilentInstallMsiBuild(aDataID: string);

var
    StrBuildPath,StrBuildName: string;
    i: integer;
    
begin

    i: = 0;
    
    StrBuildPath: = GetCellValue('SilentInstallMsiBuild',aDataID,'I_FilePath');
    Log.Message(StrBuildPath);
    if StrBuildPath <> '' then
    begin
        if not aqFile.Exists(StrBuildPath) then
        begin
            Log_StepError('The Path is Invalid!');
            StopWorkflow: = true;
            exit;
        end;
    end;

    ApplicationDataPath: = aqEnvironment.GetEnvironmentVariable('APPDATA') + '\';
    
    if aqFileSystem.Exists(ApplicationDataPath + 'DSI') then
    begin
        Sys.OleObject['WScript.Shell'].Run('cmd /c rd /s /q ' + '"' + ApplicationDataPath + '"' + 'DSI\MSIBuild\',0,True);               
        Sys.OleObject['WScript.Shell'].Run('cmd /c mkdir ' + '"' + ApplicationDataPath + '"' + 'DSI\MSIBuild\',0,True);
    end
    else
        Sys.OleObject['WScript.Shell'].Run('cmd /c mkdir ' + '"' + ApplicationDataPath + '"' + 'DSI\MSIBuild\',0,True);
        
    Log_StepMsg('Begin to Copying the Build File to Local Folder: ' + ApplicationDataPath + 'DSI\MSIBuild');
    aqFile.Copy(StrBuildPath,ApplicationDataPath + 'DSI\MSIBuild\',false);
    
    StrBuildName: = aqFileSystem.GetFileName(StrBuildPath);
    
    if aqFile.Exists(ApplicationDataPath + 'DSI\MSIBuild\' + StrBuildName) then
        Log_StepMsg('Copy Build File to Local Folder Successed!')
    else
    begin
        Log_StepError('Copy Build File to local Folder Failed!');
        StopWorkflow: = true;
        exit;
    end;
    
    try 
        Log_StepMsg('Start to Silent Install Msi Build: ' + StrBuildName);
        Sys.OleObject['WScript.Shell'].Run('cmd /c msiexec /i ' + '"' + ApplicationDataPath+ 'DSI\MsiBuild\' + StrBuildName + '"' + ' /qn',0,true);
        Log_StepMsg('Silent Install Msi Build: ' + StrBuildName + ' Successed!');
    except
    begin
        Log_StepError('Silent Install Msi Build: ' + StrBuildName + ' Failed!');
        StopWorkflow: = true;
        raise;
    end;
    end; 
    
    Sys.Refresh;
    Delay(3000);

end;

//*****************************************************************************************************************
//Function----------- Formatdsize
//Creator------------ Jack.Du            Date -------- 2 Jun, 2011
//Description-------- format the bytes into GB or MB or KB
//Input-------------- bytes (Eg.:214536987123)
//Result------------- The formatted string
//******************************************************************************************************************
function Formatdsize(dsize: float);
 
 begin
 
    if dsize >= 1073741824 then
        result: = Format('%.2f',[dsize / 1073741824])+ 'GB' //GB
    else if dsize>= 1048576 then
        result: = Format('0.00',dsize / 10487576) + 'MB' //MB
    else if dsize>= 1024 then
        result: = Format('0.00',dsize / 1024) + 'KB'; //KB
        
 end;
 
//*****************************************************************************************************************
//Function----------- SelectFolderTreeViewitem
//Creator------------ Jack.Du            Date -------- 3 Jun, 2011
//Description-------- select the desired item from folder tree view
//Input-------------- Nodes Path/TreeViewObject(Eg.: C:\Programes and files\quest software)
//Result------------- Bool
//******************************************************************************************************************
function SelectFolderTreeViewItem(aStrTreeNodes: string,TreeView): boolean;
var
    NodesLevel,NodeName,ItemName,aInstallPath: string;
    i,j: Int;        
begin

    result: = true;
    j: = 1;
    try
    begin
        aInstallPath:=aStrTreeNodes;
        aStrTreeNodes: = aqString.Replace(aStrTreeNodes,'\','|');
        {if ((Sys.OSInfo.Name = 'Win7') 
        or (Sys.OSInfo.Name = 'WinVista')
        or (Sys.OSInfo.Name = 'Win2008') 
        or (Sys.OSInfo.Name = 'WinServer')
        or (Sys.OSInfo.Name = 'WinServer7')
        )then
        begin
            aStrTreeNodes: = '|Desktop|Computer|Local Disk (' + aStrTreeNodes;
            aStrTreeNodes: = aqString.Insert(aStrTreeNodes,')',32);
        end else
        begin
            aStrTreeNodes: = '|Desktop|This PC|Local Disk (' + aStrTreeNodes;
            aStrTreeNodes: = aqString.Insert(aStrTreeNodes,')',31);
        end; }
        if TreeView.FindChild('Caption', 'This PC', '2').Exists then
        begin
           TreeView.FindChild('Caption', 'This PC', '2').click;
        end;
        if TreeView.FindChild('Caption', 'Computer', '2').Exists then
        begin
           TreeView.FindChild('Caption', 'Computer', '2').click;
        end;
        
        Delay(2000);
        TreeView.Refresh;
        TreeView.FindChild('Caption', 'Local Disk (C:)', '3').SetFocus;
        TreeView.FindChild('Caption', 'Local Disk (C:)', '3').Click(); 
        aStrTreeNodes:='Local Disk (C:)'+aStrTreeNodes;
        //Aliases.QI.Win_frm_Main.SysTreeView.ExpandItem(aStrTreeNodes,true);
        TreeView.refresh;
        Sys.Refresh;
        for i: = 1 to BuiltIn.GetListCount(aStrTreeNodes,'|') - 1 do
        begin
            ItemName: = BuiltIn.GetListItem(aStrTreeNodes,i,'|');
            TreeView.ClickItem(ItemName);
            ItemName: = '|' + ItemName;
           // NodeName: = NodeName + ItemName;
            //Log.Message(NodeName);
            //TreeView.ClickItem(NodeName);
            Delay(1000);
            Sys.Refresh; 
            TreeView.Refresh;
        end;
        
        Aliases.QI.Win_frm_Main.Win_btn_OK.ClickButton;
        Log_StepMsg('Click OK Button!');
       { if aqString.Compare((TreeView.wSelection),(aStrTreeNodes),false) = 0 then
            result: = true
        else
            result: = false;} 
        if aqString.ToUpper(Aliases.QI.QI_frm_Main.QI_Tframe_NewProducts.QI_pspnl_Right.QI_cb_InstallDir.Caption)=aqString.ToUpper(aInstallPath) then
            result: = true
        else
            result: = false;
    end;
    except
        Log_StepError('Unexception Error: ' + exceptionmessage);
        result: = false;
    end;
      
end;

//*****************************************************************************************************************
//Function----------- TreeViewItemSetChecked
//Creator------------ Jack.Du            Date -------- 10 Jun, 2011
//Description-------- select the desired item in TTreeView Control
//Input-------------- oTree: Treeview control;sItem: '|Oracle|Oracle 9i';bState: Checked/Unchecked
//Result------------- Boolean
//******************************************************************************************************************
function TreeViewItemSetChecked(oTree,sItem,bState): boolean;

var
    i,j,ix,iy: integer;
    aItems,oItem;
    bItemFound,sState: boolean;
    ItemsLevel,ItemName;
    
begin
    
    try
    begin
        //get tree item level
        ItemsLevel: = BuiltIn.GetListCount(sItem,'|');
        //trying each passed items
        if ItemsLevel > 2 then
        begin
            //get root level item name
            ItemName: = BuiltIn.GetListItem(sItem,1,'|');
            for j: = 0 to oTree.wItems.Count - 1 do
            begin
                if UpperCase(oTree.wItems.Item[j].Text) = UpperCase(ItemName) then
                begin
                    oTree.wItems.Item[j].Click;
                    oTree: = oTree.wItems.Item[j];
                    result: = true;     
                    break;
                end
                else
                begin
                    result: = false;
                end;        
            end;
        
            for i: = 2 to ItemsLevel - 1 do
            begin
                ItemName: = BuiltIn.GetListItem(sItem,i,'|');
                for j: = 0 to oTree.Items.Count - 1 do
                begin
                    if UpperCase(oTree.Items.Item[j].Text) = UpperCase(ItemName) then
                    begin
                        if bState = 'Checked' then
                        begin
                            Sys.Refresh; 
                            oTree.Refresh;
                            Delay(1000);
                            if not oTree.Items.Item[j].Selected then
                            begin
                                oTree.Items.Item[j].Click; 
                                ix: = (oTree.Items.Item[j].Bounds.Left) + (i * 20);
                                iy: = (oTree.Items.Item[j].Bounds.Height) / 2;
                                oTree.Items.Item[j].ClickXY(ix,iy);
                            end;  
                            oTree: = oTree.Items.Item[j];
                            result: = true;     
                            break;
                        end
                        else
                        begin
                            Sys.Refresh; 
                            oTree.Refresh;
                            Delay(1000);
                            if oTree.Items.Item[j].Selected then
                            begin
                                oTree.Items.Item[j].Click; 
                                ix: = (oTree.Items.Item[j].Bounds.Left) + (i * 20);
                                iy: = (oTree.Items.Item[j].Bounds.Height) / 2;
                                oTree.Items.Item[j].ClickXY(ix,iy);
                            end;  
                            oTree: = oTree.Items.Item[j];
                            result: = true;     
                            break;
                        end;  
                    end
                    else
                    begin
                        result: = false;
                    end;        
                end;        
            end;
        end
        else
        begin
            //get root level item name
            ItemName: = BuiltIn.GetListItem(sItem,1,'|');
            for j: = 0 to oTree.wItems.Count - 1 do
            begin
                if UpperCase(oTree.wItems.Item[j].Text) = UpperCase(ItemName) then
                begin  
                    if bState = 'Checked' then
                    begin
                        Sys.Refresh; 
                        oTree.Refresh;
                        Delay(1000);
                        if not oTree.wItems.Item[j].Selected then
                        begin
                            oTree.wItems.Item[j].Click;
                            ix: = ((oTree.wItems.Item[j].Bounds.Left) + 20);
                            iy: = (oTree.wItems.Item[j].Bounds.Height) / 2;
                            oTree.wItems.Item[j].ClickXY(ix,iy);
                        end;
                        result: = true;     
                        break;
                    end
                    else
                    begin
                        Sys.Refresh; 
                        oTree.Refresh;
                        Delay(1000);
                        if oTree.wItems.Item[j].Selected then
                        begin
                            oTree.wItems.Item[j].Click;
                            ix: = ((oTree.wItems.Item[j].Bounds.Left) + 20);
                            iy: = (oTree.wItems.Item[j].Bounds.Height) / 2;
                            oTree.wItems.Item[j].ClickXY(ix,iy);
                        end;
                        result: = true;     
                        break;    
                    end;
                end
                else
                begin
                    result: = false;
                end;        
            end;
        end;
    end;
    except
        Log_StepError('Unexception Error: ' + exceptionmessage);
        result: = false;
    end;

end;

//*****************************************************************************************************************
//Function----------- VerifyTreeViewItemExists
//Creator------------ Jack.Du            Date -------- 15 July, 2011
//Description-------- Check the desired item Exists in TTreeView Control
//Input-------------- oTree: Treeview control;sItem: '|Oracle|Oracle 9i'
//Result------------- Boolean
//******************************************************************************************************************
function VerifyTreeItemExists(oTree,sItem,BolExist): boolean;


var
    i,j,ix,iy: integer;
    aItems,oItem;
    bItemFound: boolean;
    ItemsLevel,ItemName;
    
begin
    
    try
    begin
        //get tree item level
        ItemsLevel: = BuiltIn.GetListCount(sItem,'\');
        //trying each passed items
        if ItemsLevel > 1 then
        begin
            //get root level item name
            ItemName: = BuiltIn.GetListItem(sItem,0,'\');
            for j: = 0 to oTree.wItems.Count - 1 do
            begin
                if UpperCase(oTree.wItems.Item[j].Text) = UpperCase(ItemName) then
                begin
                    oTree.wItems.Item[j].Click;        
                    oTree: = oTree.wItems.Item[j];     
                    break;
                end
                else
                begin
                    result: = false;
                end;        
            end;
        
            for i: = 1 to ItemsLevel - 1 do
            begin
                ItemName: = BuiltIn.GetListItem(sItem,i,'\');
                for j: = 0 to oTree.Items.Count - 1 do
                begin
                    if UpperCase(oTree.Items.Item[j].Text) = UpperCase(ItemName) then
                    begin 
                        oTree.Items.Item[j].Click;
                        if BolExist = 'True' then
                        begin
                            Sys.Refresh; 
                            if oTree.Items.Item[j].Selected then
                                result: = true
                            else
                                result: = false;
                        end
                        else
                        begin
                            Sys.Refresh;
                            if oTree.Items.Item[j].Selected then
                                result: = false
                            else
                                result: = true;
                        end; 
                        oTree: = oTree.Items.Item[j];     
                        exit;  
                    end
                    else
                    begin
                        result: = false;
                    end;        
                end;
                break;        
            end;
        end
        else
        begin
            //get root level item name
            ItemName: = BuiltIn.GetListItem(sItem,0,'\');
            for j: = 0 to oTree.wItems.Count - 1 do
            begin
                if UpperCase(oTree.wItems.Item[j].Text) = UpperCase(ItemName) then
                begin
                    if BolExist = 'True' then
                    begin
                        Sys.Refresh;
                        oTree.Refresh;
                        if oTree.wItems.Item[j].Selected then
                            result: = true
                        else
                            result: = false;
                    end
                    else
                    begin
                        Sys.Refresh;
                        oTree.Refresh;
                        if oTree.wItems.Item[j].Selected then
                            result: = false
                        else
                            result: = true;
                    end;       
                    break;
                end
                else
                begin
                    result: = false;
                end;        
            end;
        end;
    end;
    except
        Log_StepError('Unexception Error: ' + exceptionmessage);
        result: = false;
    end;

end;

procedure QI_Test;
var a,aStrMemoText;
begin 
    

    DDataServer: = GetINIFileContents(INIFilePath,NextTest,'ATCMServer');
    DDataBase:     = GetINIFileContents(INIFilePath,NextTest,'ATCMDB');
    DUser:         = GetINIFileContents(INIFilePath,NextTest,'ATCMLogin');
    DPassword:     = GetINIFileContents(INIFilePath,NextTest,'ATCMPassword');
    DProject:      = GetINIFileContents(INIFilePath,NextTest,'ATCMProject');
    DProjectID:    = GetProjectID;  
  // QI_ProductSelectionPage_SelectProducts('8')
DSI_FinishInstall_BMF('1');
end;


